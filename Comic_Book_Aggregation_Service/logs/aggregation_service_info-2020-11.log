info: Service is Running on port 3000 {"timestamp":"2020-11-02T16:58:03.668Z"}
info: Connected to MongoDB {"timestamp":"2020-11-02T16:58:04.795Z"}
info: User validate function executed successfully {"timestamp":"2020-11-02T16:59:56.249Z"}
info: User validate function executed successfully {"timestamp":"2020-11-02T17:00:02.898Z"}
info: User retrieved by username successfully {"timestamp":"2020-11-02T17:00:03.162Z"}
info: Directory structure successfully created for job id e2dd1bc0-1d2c-11eb-95e7-1bb3e0787c79 {"timestamp":"2020-11-02T17:00:18.687Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-02T17:00:18.691Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-02T17:00:18.923Z"}
info: createNewStory @ story-creating-job begin for e2dd1bc0-1d2c-11eb-95e7-1bb3e0787c79 {"timestamp":"2020-11-02T17:00:18.925Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-02T17:00:18.926Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-02T17:00:18.927Z"}
info: Remarks : undefined {"timestamp":"2020-11-02T17:01:50.433Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-02T17:01:50.434Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-02T17:01:50.438Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-02T17:01:50.441Z"}
error: create story for a panel failed! {"timestamp":"2020-11-02T17:01:50.442Z"}
error: Error: read ECONNRESET {"name":"RequestError","cause":{"errno":"ECONNRESET","code":"ECONNRESET","syscall":"read"},"error":{"errno":"ECONNRESET","code":"ECONNRESET","syscall":"read"},"options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-11-02T17-00-18.463Zhado.jpg","job_id":"e2dd1bc0-1d2c-11eb-95e7-1bb3e0787c79"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"timestamp":"2020-11-02T17:01:50.443Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-02T17:01:50.666Z"}
info: User validate function executed successfully {"timestamp":"2020-11-02T17:05:18.856Z"}
info: User validate function executed successfully {"timestamp":"2020-11-02T17:05:22.956Z"}
info: User retrieved by username successfully {"timestamp":"2020-11-02T17:05:23.192Z"}
info: Directory structure successfully created for job id a6d2aa90-1d2d-11eb-95e7-1bb3e0787c79 {"timestamp":"2020-11-02T17:05:47.451Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-02T17:05:47.453Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-02T17:05:47.661Z"}
info: createNewStory @ story-creating-job begin for a6d2aa90-1d2d-11eb-95e7-1bb3e0787c79 {"timestamp":"2020-11-02T17:05:47.662Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-02T17:05:47.662Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-02T17:05:47.663Z"}
info: Remarks : undefined {"timestamp":"2020-11-02T17:05:58.509Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-02T17:05:58.510Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-02T17:05:58.511Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-02T17:05:58.512Z"}
error: create story for a panel failed! {"timestamp":"2020-11-02T17:05:58.512Z"}
error: 500 - "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2573362947016,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"uTqgTblOid8FvoPFWTI0\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2573362948680\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2573362947144\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947208\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947336\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947464\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947272\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947848\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947912\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947976\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948040\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948168\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948232\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948296\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948360\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948104\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947400\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n" {"name":"StatusCodeError","statusCode":500,"error":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2573362947016,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"uTqgTblOid8FvoPFWTI0\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2573362948680\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2573362947144\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947208\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947336\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947464\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947272\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947848\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947912\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947976\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948040\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948168\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948232\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948296\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948360\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948104\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947400\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-11-02T17-05-47.194Zhado.jpg","job_id":"a6d2aa90-1d2d-11eb-95e7-1bb3e0787c79"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"response":{"statusCode":500,"body":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2573362947016,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"uTqgTblOid8FvoPFWTI0\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2573362948680\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2573362947144\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947208\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947336\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947464\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947272\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947848\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947912\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947976\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948040\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948168\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948232\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948296\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948360\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362948104\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947400\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2573362947656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","headers":{"content-type":"text/html; charset=utf-8","x-xss-protection":"0","connection":"close","server":"Werkzeug/0.16.1 Python/3.7.9","date":"Mon, 02 Nov 2020 17:05:58 GMT"},"request":{"uri":{"protocol":"http:","slashes":true,"auth":null,"host":"localhost:3001","port":"3001","hostname":"localhost","hash":null,"search":null,"query":null,"pathname":"/image_processing_service/recognize/character/start","path":"/image_processing_service/recognize/character/start","href":"http://localhost:3001/image_processing_service/recognize/character/start"},"method":"POST","headers":{"Content-Type":"application/json; charset=utf-8","accept":"application/json","content-length":102}}},"timestamp":"2020-11-02T17:05:58.518Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-02T17:05:58.853Z"}
info: User validate function executed successfully {"timestamp":"2020-11-02T17:10:35.860Z"}
info: User retrieved by username successfully {"timestamp":"2020-11-02T17:10:36.092Z"}
info: Directory structure successfully created for job id 595e1050-1d2e-11eb-95e7-1bb3e0787c79 {"timestamp":"2020-11-02T17:10:46.999Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-02T17:10:47.002Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-02T17:10:47.221Z"}
info: createNewStory @ story-creating-job begin for 595e1050-1d2e-11eb-95e7-1bb3e0787c79 {"timestamp":"2020-11-02T17:10:47.222Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-02T17:10:47.223Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-02T17:10:47.223Z"}
info: Remarks : undefined {"timestamp":"2020-11-02T17:10:57.580Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-02T17:10:57.581Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-02T17:10:57.582Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-02T17:10:57.582Z"}
error: create story for a panel failed! {"timestamp":"2020-11-02T17:10:57.584Z"}
error: 500 - "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2582261362888,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"fJcCICjcgc4Jyn6fRnvz\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2582261364488\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2582261363016\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261290888\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363080\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363208\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363336\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363784\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363464\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363848\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363976\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261364040\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261364104\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261364168\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363912\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363144\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363272\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363400\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n" {"name":"StatusCodeError","statusCode":500,"error":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2582261362888,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"fJcCICjcgc4Jyn6fRnvz\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2582261364488\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2582261363016\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261290888\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363080\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363208\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363336\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363784\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363464\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363848\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363976\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261364040\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261364104\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261364168\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363912\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363144\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363272\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363400\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-11-02T17-10-46.787Zhado.jpg","job_id":"595e1050-1d2e-11eb-95e7-1bb3e0787c79"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"response":{"statusCode":500,"body":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2582261362888,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"fJcCICjcgc4Jyn6fRnvz\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2582261364488\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2582261363016\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261290888\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363080\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363208\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363336\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363784\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363464\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363848\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363976\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261364040\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261364104\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261364168\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363912\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363144\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363272\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2582261363400\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","headers":{"content-type":"text/html; charset=utf-8","x-xss-protection":"0","connection":"close","server":"Werkzeug/0.16.1 Python/3.7.9","date":"Mon, 02 Nov 2020 17:10:57 GMT"},"request":{"uri":{"protocol":"http:","slashes":true,"auth":null,"host":"localhost:3001","port":"3001","hostname":"localhost","hash":null,"search":null,"query":null,"pathname":"/image_processing_service/recognize/character/start","path":"/image_processing_service/recognize/character/start","href":"http://localhost:3001/image_processing_service/recognize/character/start"},"method":"POST","headers":{"Content-Type":"application/json; charset=utf-8","accept":"application/json","content-length":102}}},"timestamp":"2020-11-02T17:10:57.600Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-02T17:10:57.998Z"}
info: Directory structure successfully created for job id aa3e41c0-1d2e-11eb-95e7-1bb3e0787c79 {"timestamp":"2020-11-02T17:13:02.686Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-02T17:13:02.688Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-02T17:13:02.896Z"}
info: createNewStory @ story-creating-job begin for aa3e41c0-1d2e-11eb-95e7-1bb3e0787c79 {"timestamp":"2020-11-02T17:13:02.896Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-02T17:13:02.896Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-02T17:13:02.897Z"}
info: Remarks : undefined {"timestamp":"2020-11-02T17:13:13.033Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-02T17:13:13.035Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-02T17:13:13.038Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-02T17:13:13.062Z"}
error: create story for a panel failed! {"timestamp":"2020-11-02T17:13:13.063Z"}
error: 500 - "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2904861933704,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"2LxXFeqkqEIU8cOYrwMy\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2904861935368\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2904861933832\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861933896\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934024\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934152\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934280\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861933960\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934536\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934600\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934664\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934408\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934728\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934856\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934920\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934984\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861935048\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934792\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print (stdout)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934088\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934216\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934344\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n" {"name":"StatusCodeError","statusCode":500,"error":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2904861933704,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"2LxXFeqkqEIU8cOYrwMy\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2904861935368\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2904861933832\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861933896\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934024\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934152\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934280\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861933960\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934536\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934600\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934664\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934408\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934728\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934856\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934920\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934984\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861935048\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934792\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print (stdout)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934088\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934216\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934344\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-11-02T17-13-02.426Zh19.jpg","job_id":"aa3e41c0-1d2e-11eb-95e7-1bb3e0787c79"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"response":{"statusCode":500,"body":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2904861933704,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"2LxXFeqkqEIU8cOYrwMy\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2904861935368\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2904861933832\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861933896\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934024\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934152\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934280\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861933960\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934536\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934600\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934664\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934408\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934728\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934856\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934920\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934984\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861935048\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934792\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print (stdout)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934088\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934216\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2904861934344\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","headers":{"content-type":"text/html; charset=utf-8","x-xss-protection":"0","connection":"close","server":"Werkzeug/0.16.1 Python/3.7.9","date":"Mon, 02 Nov 2020 17:13:13 GMT"},"request":{"uri":{"protocol":"http:","slashes":true,"auth":null,"host":"localhost:3001","port":"3001","hostname":"localhost","hash":null,"search":null,"query":null,"pathname":"/image_processing_service/recognize/character/start","path":"/image_processing_service/recognize/character/start","href":"http://localhost:3001/image_processing_service/recognize/character/start"},"method":"POST","headers":{"Content-Type":"application/json; charset=utf-8","accept":"application/json","content-length":101}}},"timestamp":"2020-11-02T17:13:13.064Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-02T17:13:13.402Z"}
info: Directory structure successfully created for job id 3736d1a0-1d2f-11eb-95e7-1bb3e0787c79 {"timestamp":"2020-11-02T17:16:59.196Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-02T17:16:59.200Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-02T17:16:59.882Z"}
info: createNewStory @ story-creating-job begin for 3736d1a0-1d2f-11eb-95e7-1bb3e0787c79 {"timestamp":"2020-11-02T17:16:59.883Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-02T17:16:59.883Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-02T17:16:59.884Z"}
info: Remarks : undefined {"timestamp":"2020-11-02T17:17:09.657Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-02T17:17:09.660Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-02T17:17:09.663Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-02T17:17:09.684Z"}
error: create story for a panel failed! {"timestamp":"2020-11-02T17:17:09.684Z"}
error: 500 - "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 1798297710344,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"hqAOCiA0TD1E16i73BFG\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-1798297789896\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-1798297710472\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297710536\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788488\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788616\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788744\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789000\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789064\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789128\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789192\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788872\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789256\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789384\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789448\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789512\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789576\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789320\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788552\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788680\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788808\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n" {"name":"StatusCodeError","statusCode":500,"error":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 1798297710344,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"hqAOCiA0TD1E16i73BFG\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-1798297789896\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-1798297710472\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297710536\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788488\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788616\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788744\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789000\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789064\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789128\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789192\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788872\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789256\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789384\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789448\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789512\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789576\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789320\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788552\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788680\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788808\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-11-02T17-16-58.982Zh4.jpg","job_id":"3736d1a0-1d2f-11eb-95e7-1bb3e0787c79"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"response":{"statusCode":500,"body":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 1798297710344,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"hqAOCiA0TD1E16i73BFG\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-1798297789896\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-1798297710472\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297710536\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788488\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788616\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788744\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789000\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789064\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789128\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789192\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788872\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789256\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789384\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789448\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789512\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789576\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297789320\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788552\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788680\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1798297788808\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","headers":{"content-type":"text/html; charset=utf-8","x-xss-protection":"0","connection":"close","server":"Werkzeug/0.16.1 Python/3.7.9","date":"Mon, 02 Nov 2020 17:17:09 GMT"},"request":{"uri":{"protocol":"http:","slashes":true,"auth":null,"host":"localhost:3001","port":"3001","hostname":"localhost","hash":null,"search":null,"query":null,"pathname":"/image_processing_service/recognize/character/start","path":"/image_processing_service/recognize/character/start","href":"http://localhost:3001/image_processing_service/recognize/character/start"},"method":"POST","headers":{"Content-Type":"application/json; charset=utf-8","accept":"application/json","content-length":100}}},"timestamp":"2020-11-02T17:17:09.686Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-02T17:17:10.032Z"}
info: Directory structure successfully created for job id 05986040-1d30-11eb-95e7-1bb3e0787c79 {"timestamp":"2020-11-02T17:22:45.446Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-02T17:22:45.447Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-02T17:22:45.665Z"}
info: createNewStory @ story-creating-job begin for 05986040-1d30-11eb-95e7-1bb3e0787c79 {"timestamp":"2020-11-02T17:22:45.665Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-02T17:22:45.666Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-02T17:22:45.666Z"}
info: Remarks : undefined {"timestamp":"2020-11-02T17:22:55.503Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-02T17:22:55.504Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-02T17:22:55.504Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-02T17:22:55.505Z"}
error: create story for a panel failed! {"timestamp":"2020-11-02T17:22:55.505Z"}
error: 500 - "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2150809039496,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"y3mOYPaFhYi4kutkA3gm\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2150809041160\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2150809039624\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039688\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039816\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039944\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040072\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039752\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040328\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040392\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040456\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040200\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040520\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040648\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040712\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040776\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040840\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040584\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039880\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040008\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040136\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n" {"name":"StatusCodeError","statusCode":500,"error":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2150809039496,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"y3mOYPaFhYi4kutkA3gm\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2150809041160\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2150809039624\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039688\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039816\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039944\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040072\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039752\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040328\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040392\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040456\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040200\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040520\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040648\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040712\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040776\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040840\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040584\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039880\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040008\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040136\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-11-02T17-22-45.233Ztintin.jpg","job_id":"05986040-1d30-11eb-95e7-1bb3e0787c79"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"response":{"statusCode":500,"body":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2150809039496,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"y3mOYPaFhYi4kutkA3gm\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2150809041160\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2150809039624\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039688\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039816\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039944\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040072\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039752\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040328\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040392\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040456\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040200\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040520\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040648\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040712\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040776\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040840\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040584\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809039880\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040008\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2150809040136\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","headers":{"content-type":"text/html; charset=utf-8","x-xss-protection":"0","connection":"close","server":"Werkzeug/0.16.1 Python/3.7.9","date":"Mon, 02 Nov 2020 17:22:55 GMT"},"request":{"uri":{"protocol":"http:","slashes":true,"auth":null,"host":"localhost:3001","port":"3001","hostname":"localhost","hash":null,"search":null,"query":null,"pathname":"/image_processing_service/recognize/character/start","path":"/image_processing_service/recognize/character/start","href":"http://localhost:3001/image_processing_service/recognize/character/start"},"method":"POST","headers":{"Content-Type":"application/json; charset=utf-8","accept":"application/json","content-length":104}}},"timestamp":"2020-11-02T17:22:55.507Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-02T17:22:55.858Z"}
info: Service is Running on port 3000 {"timestamp":"2020-11-03T09:12:41.337Z"}
info: Connected to MongoDB {"timestamp":"2020-11-03T09:12:43.427Z"}
info: User validate function executed successfully {"timestamp":"2020-11-03T09:14:36.472Z"}
info: User retrieved by username successfully {"timestamp":"2020-11-03T09:14:36.702Z"}
info: Directory structure successfully created for job id 12b9e1b0-1db5-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T09:15:10.542Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T09:15:10.545Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T09:15:10.786Z"}
info: createNewStory @ story-creating-job begin for 12b9e1b0-1db5-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T09:15:10.788Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T09:15:10.789Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T09:15:10.789Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T09:15:21.898Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T09:15:21.898Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T09:15:21.902Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T09:15:21.908Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T09:15:21.911Z"}
error: 500 - "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2238234318792,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"zCqk8hvi1g8UrhjRkZmq\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2238234320456\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2238234318920\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234318984\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319112\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319240\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319368\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319048\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319624\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319688\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319752\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319496\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319816\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319944\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234320008\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234320072\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234320136\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319880\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319176\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319304\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319432\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n" {"name":"StatusCodeError","statusCode":500,"error":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2238234318792,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"zCqk8hvi1g8UrhjRkZmq\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2238234320456\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2238234318920\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234318984\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319112\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319240\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319368\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319048\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319624\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319688\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319752\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319496\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319816\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319944\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234320008\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234320072\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234320136\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319880\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319176\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319304\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319432\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-11-03T09-15-10.295Zhaddocks.jpg","job_id":"12b9e1b0-1db5-11eb-81a9-3fd4887b93b1"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"response":{"statusCode":500,"body":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2238234318792,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"zCqk8hvi1g8UrhjRkZmq\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2238234320456\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2238234318920\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234318984\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319112\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319240\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319368\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319048\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319624\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319688\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319752\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319496\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319816\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319944\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234320008\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234320072\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234320136\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319880\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319176\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319304\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2238234319432\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","headers":{"content-type":"text/html; charset=utf-8","x-xss-protection":"0","connection":"close","server":"Werkzeug/0.16.1 Python/3.7.9","date":"Tue, 03 Nov 2020 09:15:21 GMT"},"request":{"uri":{"protocol":"http:","slashes":true,"auth":null,"host":"localhost:3001","port":"3001","hostname":"localhost","hash":null,"search":null,"query":null,"pathname":"/image_processing_service/recognize/character/start","path":"/image_processing_service/recognize/character/start","href":"http://localhost:3001/image_processing_service/recognize/character/start"},"method":"POST","headers":{"Content-Type":"application/json; charset=utf-8","accept":"application/json","content-length":106}}},"timestamp":"2020-11-03T09:15:21.915Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T09:15:22.238Z"}
info: Directory structure successfully created for job id 81e29b90-1db5-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T09:18:17.036Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T09:18:17.037Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T09:18:17.264Z"}
info: createNewStory @ story-creating-job begin for 81e29b90-1db5-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T09:18:17.266Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T09:18:17.268Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T09:18:17.270Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T09:18:31.363Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T09:18:31.365Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T09:18:31.366Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T09:18:31.367Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T09:18:31.368Z"}
error: 500 - "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 1759017901000,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"R6RwCMz5HQEaZx3Pf316\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-1759017935496\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-1759017901128\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901192\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901320\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901448\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901576\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901256\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901832\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901896\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901960\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901704\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017902024\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901512\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901768\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901640\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901384\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017934920\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017935048\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017935176\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017935304\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n" {"name":"StatusCodeError","statusCode":500,"error":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 1759017901000,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"R6RwCMz5HQEaZx3Pf316\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-1759017935496\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-1759017901128\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901192\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901320\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901448\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901576\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901256\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901832\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901896\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901960\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901704\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017902024\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901512\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901768\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901640\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901384\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017934920\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017935048\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017935176\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017935304\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-11-03T09-18-16.810ZScreenshots.jpg","job_id":"81e29b90-1db5-11eb-81a9-3fd4887b93b1"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"response":{"statusCode":500,"body":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 1759017901000,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"R6RwCMz5HQEaZx3Pf316\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-1759017935496\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-1759017901128\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901192\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901320\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901448\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901576\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901256\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901832\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901896\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901960\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901704\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017902024\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901512\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901768\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901640\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017901384\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017934920\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017935048\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017935176\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-1759017935304\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","headers":{"content-type":"text/html; charset=utf-8","x-xss-protection":"0","connection":"close","server":"Werkzeug/0.16.1 Python/3.7.9","date":"Tue, 03 Nov 2020 09:18:31 GMT"},"request":{"uri":{"protocol":"http:","slashes":true,"auth":null,"host":"localhost:3001","port":"3001","hostname":"localhost","hash":null,"search":null,"query":null,"pathname":"/image_processing_service/recognize/character/start","path":"/image_processing_service/recognize/character/start","href":"http://localhost:3001/image_processing_service/recognize/character/start"},"method":"POST","headers":{"Content-Type":"application/json; charset=utf-8","accept":"application/json","content-length":109}}},"timestamp":"2020-11-03T09:18:31.378Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T09:18:31.794Z"}
info: Directory structure successfully created for job id 27656830-1db7-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T09:30:04.213Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T09:30:04.215Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T09:30:04.438Z"}
info: createNewStory @ story-creating-job begin for 27656830-1db7-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T09:30:04.438Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T09:30:04.439Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T09:30:04.439Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T09:30:18.353Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T09:30:18.358Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T09:30:18.359Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T09:30:18.360Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T09:30:18.375Z"}
error: 500 - "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2549687397320,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"mkySF9wVkIkaLx2wRWJi\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2549687427720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2549687397448\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397512\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397640\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397768\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397896\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397576\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398152\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398216\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398280\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398024\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398344\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397832\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398088\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397960\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397704\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687427144\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687427272\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687427400\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687427528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n" {"name":"StatusCodeError","statusCode":500,"error":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2549687397320,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"mkySF9wVkIkaLx2wRWJi\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2549687427720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2549687397448\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397512\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397640\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397768\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397896\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397576\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398152\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398216\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398280\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398024\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398344\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397832\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398088\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397960\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397704\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687427144\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687427272\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687427400\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687427528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-11-03T09-30-03.985Zhaddocks.jpg","job_id":"27656830-1db7-11eb-81a9-3fd4887b93b1"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"response":{"statusCode":500,"body":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2549687397320,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"mkySF9wVkIkaLx2wRWJi\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2549687427720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2549687397448\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397512\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397640\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397768\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397896\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397576\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398152\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398216\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398280\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398024\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398344\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397832\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687398088\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397960\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687397704\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687427144\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687427272\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687427400\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2549687427528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","headers":{"content-type":"text/html; charset=utf-8","x-xss-protection":"0","connection":"close","server":"Werkzeug/0.16.1 Python/3.7.9","date":"Tue, 03 Nov 2020 09:30:18 GMT"},"request":{"uri":{"protocol":"http:","slashes":true,"auth":null,"host":"localhost:3001","port":"3001","hostname":"localhost","hash":null,"search":null,"query":null,"pathname":"/image_processing_service/recognize/character/start","path":"/image_processing_service/recognize/character/start","href":"http://localhost:3001/image_processing_service/recognize/character/start"},"method":"POST","headers":{"Content-Type":"application/json; charset=utf-8","accept":"application/json","content-length":106}}},"timestamp":"2020-11-03T09:30:18.380Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T09:30:18.778Z"}
info: Directory structure successfully created for job id 7ebcd840-1dba-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T09:53:59.239Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T09:53:59.242Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T09:53:59.463Z"}
info: createNewStory @ story-creating-job begin for 7ebcd840-1dba-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T09:53:59.464Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T09:53:59.465Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T09:53:59.466Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T09:54:32.698Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T09:54:32.699Z"}
error: Character detection failed! {"timestamp":"2020-11-03T09:54:32.699Z"}
info: detectObjects @ story-creating-job begin {"timestamp":"2020-11-03T09:54:32.700Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T09:54:32.700Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T09:54:32.701Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T09:54:32.706Z"}
error: 2020-11-03 15:24:29.132427: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
Traceback (most recent call last):
  File "Object_detection_image.py", line 17, in <module>
    cv2.imwrite(PATH_TO_OUTPUT_IMG,image)
NameError: name 'PATH_TO_OUTPUT_IMG' is not defined
 {"timestamp":"2020-11-03T09:54:32.707Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T09:54:32.925Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T09:54:43.161Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T09:54:43.162Z"}
info: Object detection successful! {"timestamp":"2020-11-03T09:54:43.162Z"}
info: [] {"timestamp":"2020-11-03T09:54:43.183Z"}
info: segmentBallons @ balloon-segmentation-job begin {"timestamp":"2020-11-03T09:54:43.184Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T09:54:43.184Z"}
info: detectObjects @ story-creating-job end {"timestamp":"2020-11-03T09:54:43.187Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T09:54:49.495Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T09:54:49.496Z"}
info: Balloon segmentation successful! {"timestamp":"2020-11-03T09:54:49.497Z"}
info: Segmented image name : 2020-11-03T09-53-59.014ZScreenshot_org_content.jpg {"timestamp":"2020-11-03T09:54:49.497Z"}
info: extractText @ OCR-job begin {"timestamp":"2020-11-03T09:54:49.498Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T09:54:49.499Z"}
info: segmentPanels @ panel-creating-job end {"timestamp":"2020-11-03T09:54:49.500Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T09:54:49.937Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T09:54:49.938Z"}
info: Text extraction successful! {"timestamp":"2020-11-03T09:54:49.939Z"}
info: {
  "output_filename": "OCR_2020-11-03T09-53-59.014ZScreenshot_org_content.jpg.txt",
  "status": "success"
} {"timestamp":"2020-11-03T09:54:49.940Z"}
info: extractText @ OCR-job end {"timestamp":"2020-11-03T09:54:49.941Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T09:54:49.959Z"}
info: Directory structure successfully created for job id ea0d12e0-1dba-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T09:56:59.280Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T09:56:59.285Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T09:56:59.503Z"}
info: createNewStory @ story-creating-job begin for ea0d12e0-1dba-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T09:56:59.504Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T09:56:59.504Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T09:56:59.505Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T09:57:06.762Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T09:57:06.764Z"}
error: Character detection failed! {"timestamp":"2020-11-03T09:57:06.764Z"}
info: detectObjects @ story-creating-job begin {"timestamp":"2020-11-03T09:57:06.765Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T09:57:06.766Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T09:57:06.767Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T09:57:06.768Z"}
error: 2020-11-03 15:27:00.430224: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
Traceback (most recent call last):
  File "Object_detection_image.py", line 17, in <module>
    cv2.imwrite(PATH_TO_OUTPUT_IMG,image)
NameError: name 'PATH_TO_OUTPUT_IMG' is not defined
 {"timestamp":"2020-11-03T09:57:06.771Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T09:57:06.991Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T09:57:18.660Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T09:57:18.661Z"}
info: Object detection successful! {"timestamp":"2020-11-03T09:57:18.661Z"}
info: [] {"timestamp":"2020-11-03T09:57:18.662Z"}
info: segmentBallons @ balloon-segmentation-job begin {"timestamp":"2020-11-03T09:57:18.662Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T09:57:18.692Z"}
info: detectObjects @ story-creating-job end {"timestamp":"2020-11-03T09:57:18.694Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T09:57:25.384Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T09:57:25.385Z"}
info: Balloon segmentation successful! {"timestamp":"2020-11-03T09:57:25.386Z"}
info: Segmented image name : 2020-11-03T09-56-59.057ZScreenshot_org_content.jpg {"timestamp":"2020-11-03T09:57:25.387Z"}
info: extractText @ OCR-job begin {"timestamp":"2020-11-03T09:57:25.388Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T09:57:25.389Z"}
info: segmentPanels @ panel-creating-job end {"timestamp":"2020-11-03T09:57:25.390Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T09:57:25.649Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T09:57:25.650Z"}
info: Text extraction successful! {"timestamp":"2020-11-03T09:57:25.650Z"}
info: {
  "output_filename": "OCR_2020-11-03T09-56-59.057ZScreenshot_org_content.jpg.txt",
  "status": "success"
} {"timestamp":"2020-11-03T09:57:25.650Z"}
info: extractText @ OCR-job end {"timestamp":"2020-11-03T09:57:25.651Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T09:57:25.652Z"}
info: Directory structure successfully created for job id aaa8f9f0-1dbc-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:09:31.922Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T10:09:31.926Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T10:09:32.144Z"}
info: createNewStory @ story-creating-job begin for aaa8f9f0-1dbc-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:09:32.145Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T10:09:32.146Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:09:32.146Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:09:33.162Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:09:33.166Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T10:09:33.172Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T10:09:33.174Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T10:09:33.175Z"}
error: Error: connect ECONNREFUSED 127.0.0.1:3001 {"name":"RequestError","cause":{"errno":"ECONNREFUSED","code":"ECONNREFUSED","syscall":"connect","address":"127.0.0.1","port":3001},"error":{"errno":"ECONNREFUSED","code":"ECONNREFUSED","syscall":"connect","address":"127.0.0.1","port":3001},"options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-11-03T10-09-31.699Zlock.jpg","job_id":"aaa8f9f0-1dbc-11eb-81a9-3fd4887b93b1"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"timestamp":"2020-11-03T10:09:33.178Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T10:09:33.398Z"}
info: Directory structure successfully created for job id c44a8f90-1dbc-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:10:14.925Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T10:10:14.928Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T10:10:15.148Z"}
info: createNewStory @ story-creating-job begin for c44a8f90-1dbc-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:10:15.149Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T10:10:15.151Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:10:15.151Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:10:19.991Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:10:19.991Z"}
error: Character detection failed! {"timestamp":"2020-11-03T10:10:19.992Z"}
info: detectObjects @ story-creating-job begin {"timestamp":"2020-11-03T10:10:19.993Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:10:19.993Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T10:10:19.996Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T10:10:19.997Z"}
error: 2020-11-03 15:40:15.626367: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
Traceback (most recent call last):
  File "Object_detection_image.py", line 17, in <module>
    cv2.imwrite(PATH_TO_OUTPUT_IMG,image)
NameError: name 'PATH_TO_OUTPUT_IMG' is not defined
 {"timestamp":"2020-11-03T10:10:19.997Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T10:10:20.216Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:10:29.942Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:10:29.943Z"}
info: Object detection successful! {"timestamp":"2020-11-03T10:10:29.944Z"}
info: [
  {
    "Object": "Car: 99%",
    "bottom": "2361.8191251158714",
    "left": "1060.7291424274445",
    "right": "2366.0",
    "top": "1619.6811920404434",
    "xmax": "1.0",
    "xmin": "0.44832170009613037",
    "ymax": "0.9986550211906433",
    "ymin": "0.6848546266555786"
  }
] {"timestamp":"2020-11-03T10:10:29.944Z"}
info: segmentBallons @ balloon-segmentation-job begin {"timestamp":"2020-11-03T10:10:29.947Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:10:29.949Z"}
info: detectObjects @ story-creating-job end {"timestamp":"2020-11-03T10:10:29.951Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:10:38.107Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:10:38.111Z"}
info: Balloon segmentation successful! {"timestamp":"2020-11-03T10:10:38.112Z"}
info: Segmented image name : 2020-11-03T10-10-14.699Zlock_org_content.jpg {"timestamp":"2020-11-03T10:10:38.113Z"}
info: extractText @ OCR-job begin {"timestamp":"2020-11-03T10:10:38.115Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:10:38.117Z"}
info: segmentPanels @ panel-creating-job end {"timestamp":"2020-11-03T10:10:38.119Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:10:38.584Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:10:38.585Z"}
info: Text extraction successful! {"timestamp":"2020-11-03T10:10:38.585Z"}
info: {
  "output_filename": "OCR_2020-11-03T10-10-14.699Zlock_org_content.jpg.txt",
  "status": "success"
} {"timestamp":"2020-11-03T10:10:38.586Z"}
info: extractText @ OCR-job end {"timestamp":"2020-11-03T10:10:38.587Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T10:10:38.587Z"}
info: Directory structure successfully created for job id 44753ad0-1dbd-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:13:49.957Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T10:13:49.959Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T10:13:50.180Z"}
info: createNewStory @ story-creating-job begin for 44753ad0-1dbd-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:13:50.182Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T10:13:50.184Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:13:50.185Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:13:54.560Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:13:54.561Z"}
error: Character detection failed! {"timestamp":"2020-11-03T10:13:54.561Z"}
info: detectObjects @ story-creating-job begin {"timestamp":"2020-11-03T10:13:54.563Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:13:54.563Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T10:13:54.580Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T10:13:54.581Z"}
error: 2020-11-03 15:43:50.679199: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
Traceback (most recent call last):
  File "Object_detection_image.py", line 17, in <module>
    cv2.imwrite(PATH_TO_OUTPUT_IMG,image)
NameError: name 'PATH_TO_OUTPUT_IMG' is not defined
 {"timestamp":"2020-11-03T10:13:54.581Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T10:13:54.798Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:14:05.382Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:14:05.382Z"}
info: Object detection successful! {"timestamp":"2020-11-03T10:14:05.383Z"}
info: [] {"timestamp":"2020-11-03T10:14:05.383Z"}
info: segmentBallons @ balloon-segmentation-job begin {"timestamp":"2020-11-03T10:14:05.383Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:14:05.384Z"}
info: detectObjects @ story-creating-job end {"timestamp":"2020-11-03T10:14:05.385Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:14:11.589Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:14:11.590Z"}
info: Balloon segmentation successful! {"timestamp":"2020-11-03T10:14:11.591Z"}
info: Segmented image name : 2020-11-03T10-13-49.732Zhaddocks_org_content.jpg {"timestamp":"2020-11-03T10:14:11.592Z"}
info: extractText @ OCR-job begin {"timestamp":"2020-11-03T10:14:11.592Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:14:11.593Z"}
info: segmentPanels @ panel-creating-job end {"timestamp":"2020-11-03T10:14:11.593Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:14:11.860Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:14:11.861Z"}
info: Text extraction successful! {"timestamp":"2020-11-03T10:14:11.863Z"}
info: {
  "output_filename": "OCR_2020-11-03T10-13-49.732Zhaddocks_org_content.jpg.txt",
  "status": "success"
} {"timestamp":"2020-11-03T10:14:11.865Z"}
info: extractText @ OCR-job end {"timestamp":"2020-11-03T10:14:11.867Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T10:14:11.871Z"}
info: Directory structure successfully created for job id e4c803f0-1dbd-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:18:18.930Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T10:18:18.932Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T10:18:19.149Z"}
info: createNewStory @ story-creating-job begin for e4c803f0-1dbd-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:18:19.149Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T10:18:19.149Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:18:19.150Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:18:23.751Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:18:23.752Z"}
error: Character detection failed! {"timestamp":"2020-11-03T10:18:23.754Z"}
info: detectObjects @ story-creating-job begin {"timestamp":"2020-11-03T10:18:23.761Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:18:23.764Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T10:18:23.786Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T10:18:23.788Z"}
error: 2020-11-03 15:48:19.678050: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
Traceback (most recent call last):
  File "Object_detection_image.py", line 17, in <module>
    cv2.imwrite(PATH_TO_OUTPUT_IMG,image)
NameError: name 'PATH_TO_OUTPUT_IMG' is not defined
 {"timestamp":"2020-11-03T10:18:23.790Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T10:18:24.009Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:18:27.209Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:18:27.209Z"}
error: Object detection failed! {"timestamp":"2020-11-03T10:18:27.210Z"}
info: detectObjects @ story-creating-job end {"timestamp":"2020-11-03T10:18:27.210Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T10:18:27.211Z"}
info: Directory structure successfully created for job id 5fb68140-1dbe-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:21:45.175Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T10:21:45.176Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T10:21:45.395Z"}
info: createNewStory @ story-creating-job begin for 5fb68140-1dbe-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:21:45.396Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T10:21:45.396Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:21:45.397Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:21:57.488Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:21:57.488Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T10:21:57.489Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T10:21:57.489Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T10:21:57.490Z"}
error: 500 - "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2159167355400,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"oBfLyqT6CwOeAk6BcZJC\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2159167356808\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2159167355528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355848\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355976\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356232\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356296\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356360\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356104\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356424\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356552\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356616\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356680\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356744\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356488\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355784\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355912\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356168\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n" {"name":"StatusCodeError","statusCode":500,"error":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2159167355400,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"oBfLyqT6CwOeAk6BcZJC\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2159167356808\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2159167355528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355848\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355976\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356232\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356296\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356360\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356104\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356424\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356552\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356616\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356680\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356744\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356488\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355784\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355912\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356168\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-11-03T10-21-44.950Ztestimage.jpg","job_id":"5fb68140-1dbe-11eb-81a9-3fd4887b93b1"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"response":{"statusCode":500,"body":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2159167355400,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"oBfLyqT6CwOeAk6BcZJC\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2159167356808\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2159167355528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355848\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355976\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356232\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356296\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356360\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356104\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356424\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356552\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356616\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356680\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356744\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356488\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355784\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167355912\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2159167356168\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","headers":{"content-type":"text/html; charset=utf-8","x-xss-protection":"0","connection":"close","server":"Werkzeug/0.16.1 Python/3.7.9","date":"Tue, 03 Nov 2020 10:21:57 GMT"},"request":{"uri":{"protocol":"http:","slashes":true,"auth":null,"host":"localhost:3001","port":"3001","hostname":"localhost","hash":null,"search":null,"query":null,"pathname":"/image_processing_service/recognize/character/start","path":"/image_processing_service/recognize/character/start","href":"http://localhost:3001/image_processing_service/recognize/character/start"},"method":"POST","headers":{"Content-Type":"application/json; charset=utf-8","accept":"application/json","content-length":107}}},"timestamp":"2020-11-03T10:21:57.492Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T10:21:57.837Z"}
info: Directory structure successfully created for job id 5881e940-1dbf-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:28:42.582Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T10:28:42.583Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T10:28:42.800Z"}
info: createNewStory @ story-creating-job begin for 5881e940-1dbf-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:28:42.801Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T10:28:42.802Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:28:42.802Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:28:54.837Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:28:54.837Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T10:28:54.838Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T10:28:54.838Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T10:28:54.839Z"}
error: 500 - "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2114216275336,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"LZrgq6MkRmxCdQNODR5X\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2114216301640\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2114216275464\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275784\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275912\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275848\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300616\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300744\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300872\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301064\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301192\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301256\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301320\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301000\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301128\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300680\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300808\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n" {"name":"StatusCodeError","statusCode":500,"error":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2114216275336,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"LZrgq6MkRmxCdQNODR5X\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2114216301640\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2114216275464\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275784\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275912\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275848\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300616\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300744\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300872\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301064\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301192\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301256\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301320\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301000\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301128\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300680\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300808\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-11-03T10-28-42.363Ztestimage.jpg","job_id":"5881e940-1dbf-11eb-81a9-3fd4887b93b1"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"response":{"statusCode":500,"body":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2114216275336,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"LZrgq6MkRmxCdQNODR5X\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2114216301640\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2114216275464\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275784\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275912\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275848\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300616\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300744\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216275720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300872\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301064\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301192\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301256\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301320\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301000\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">37</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216301128\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300680\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2114216300808\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 37, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","headers":{"content-type":"text/html; charset=utf-8","x-xss-protection":"0","connection":"close","server":"Werkzeug/0.16.1 Python/3.7.9","date":"Tue, 03 Nov 2020 10:28:54 GMT"},"request":{"uri":{"protocol":"http:","slashes":true,"auth":null,"host":"localhost:3001","port":"3001","hostname":"localhost","hash":null,"search":null,"query":null,"pathname":"/image_processing_service/recognize/character/start","path":"/image_processing_service/recognize/character/start","href":"http://localhost:3001/image_processing_service/recognize/character/start"},"method":"POST","headers":{"Content-Type":"application/json; charset=utf-8","accept":"application/json","content-length":107}}},"timestamp":"2020-11-03T10:28:54.841Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T10:28:55.257Z"}
info: User validate function executed successfully {"timestamp":"2020-11-03T10:50:19.970Z"}
info: User retrieved by username successfully {"timestamp":"2020-11-03T10:50:20.195Z"}
info: Directory structure successfully created for job id 684d7620-1dc2-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:50:37.572Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T10:50:37.573Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T10:50:37.792Z"}
info: createNewStory @ story-creating-job begin for 684d7620-1dc2-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T10:50:37.793Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T10:50:37.794Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T10:50:37.794Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T10:50:49.137Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T10:50:49.138Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T10:50:49.139Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T10:50:49.139Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T10:50:49.142Z"}
error: 500 - "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2062597390280,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"K88JpRyXTzK7vCIE4i61\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2062597465736\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2062597464200\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464264\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464392\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464520\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464648\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464328\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464904\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464968\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465032\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464776\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465096\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465224\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465288\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465352\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465416\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465160\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464456\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464584\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464712\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 38, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 38, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n" {"name":"StatusCodeError","statusCode":500,"error":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2062597390280,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"K88JpRyXTzK7vCIE4i61\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2062597465736\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2062597464200\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464264\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464392\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464520\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464648\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464328\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464904\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464968\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465032\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464776\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465096\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465224\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465288\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465352\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465416\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465160\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464456\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464584\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464712\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 38, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 38, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-11-03T10-50-37.352Ztestimage.jpg","job_id":"684d7620-1dc2-11eb-81a9-3fd4887b93b1"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"response":{"statusCode":500,"body":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0) // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2062597390280,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"K88JpRyXTzK7vCIE4i61\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>json.decoder.JSONDecodeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2062597465736\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">353</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>This can be used to decode a JSON document from a string that may</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>have extraneous data at the end.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">During handling of the above exception, another exception occurred:</div>\n<li><div class=\"frame\" id=\"frame-2062597464200\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464264\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464392\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464520\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464648\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464328\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464904\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464968\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465032\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464776\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465096\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465224\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465288\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465352\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465416\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597465160\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                </span>print('Error occurred while detecting characters')</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({'status':'failed', 'error': str(stderr)})</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>stdout = stdout.replace(&quot;\\'&quot;, &quot;\\&quot;&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>print(&quot;stdout — {}&quot;.format(stdout))</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return jsonify({'status':'success', 'result' : json.loads(stdout)})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464456\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\"</cite>,\n      line <em class=\"line\">348</em>,\n      in <code class=\"function\">loads</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>s = s.decode(detect_encoding(s), 'surrogatepass')</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if (cls is None and object_hook is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_int is None and parse_float is None and</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>parse_constant is None and object_pairs_hook is None and not kw):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return _default_decoder.decode(s)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if cls is None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cls = JSONDecoder</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_hook is not None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>kw['object_hook'] = object_hook</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>if object_pairs_hook is not None:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464584\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">337</em>,\n      in <code class=\"function\">decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def decode(self, s, _w=WHITESPACE.match):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Return the Python representation of ``s`` (a ``str`` instance</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>containing a JSON document).</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>obj, end = self.raw_decode(s, idx=_w(s, 0).end())</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>end = _w(s, end).end()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if end != len(s):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Extra data&quot;, s, end)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2062597464712\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\"</cite>,\n      line <em class=\"line\">355</em>,\n      in <code class=\"function\">raw_decode</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>obj, end = self.scan_once(s, idx)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except StopIteration as err:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return obj, end</pre></div>\n</div>\n</ul>\n  <blockquote>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py&quot;, line 38, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py&quot;, line 348, in loads\n    return _default_decoder.decode(s)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py&quot;, line 355, in raw_decode\n    raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\nStopIteration: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic Buzz\\Comic_Book_Image_Processing_Service\\controllers\\character_controller.py\", line 38, in post\n    return jsonify({'status':'success', 'result' : json.loads(stdout)})\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\__init__.py\", line 348, in loads\n    return _default_decoder.decode(s)\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"C:\\Users\\Dilshan\\anaconda3\\envs\\tensorflow1\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n-->\n","headers":{"content-type":"text/html; charset=utf-8","x-xss-protection":"0","connection":"close","server":"Werkzeug/0.16.1 Python/3.7.9","date":"Tue, 03 Nov 2020 10:50:49 GMT"},"request":{"uri":{"protocol":"http:","slashes":true,"auth":null,"host":"localhost:3001","port":"3001","hostname":"localhost","hash":null,"search":null,"query":null,"pathname":"/image_processing_service/recognize/character/start","path":"/image_processing_service/recognize/character/start","href":"http://localhost:3001/image_processing_service/recognize/character/start"},"method":"POST","headers":{"Content-Type":"application/json; charset=utf-8","accept":"application/json","content-length":107}}},"timestamp":"2020-11-03T10:50:49.148Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T10:50:49.538Z"}
info: User validate function executed successfully {"timestamp":"2020-11-03T11:08:36.340Z"}
info: User retrieved by username successfully {"timestamp":"2020-11-03T11:08:36.565Z"}
info: Directory structure successfully created for job id f2335ce0-1dc4-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T11:08:47.920Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T11:08:47.922Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T11:08:48.138Z"}
info: createNewStory @ story-creating-job begin for f2335ce0-1dc4-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T11:08:48.139Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T11:08:48.139Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T11:08:48.139Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T11:08:55.093Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T11:08:55.094Z"}
error: Character detection failed! {"timestamp":"2020-11-03T11:08:55.096Z"}
info: detectObjects @ story-creating-job begin {"timestamp":"2020-11-03T11:08:55.098Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T11:08:55.101Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T11:08:55.102Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T11:08:55.102Z"}
error: 2020-11-03 16:38:48.735593: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-11-03 16:38:54.162887: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
2020-11-03 16:38:54.164755: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library nvcuda.dll
2020-11-03 16:38:54.464159: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1639] Found device 0 with properties: 
name: GeForce GTX 1050 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.62
pciBusID: 0000:01:00.0
2020-11-03 16:38:54.464301: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-11-03 16:38:54.465560: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'cublas64_100.dll'; dlerror: cublas64_100.dll not found
2020-11-03 16:38:54.467138: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'cufft64_100.dll'; dlerror: cufft64_100.dll not found
2020-11-03 16:38:54.468304: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'curand64_100.dll'; dlerror: curand64_100.dll not found
2020-11-03 16:38:54.469469: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'cusolver64_100.dll'; dlerror: cusolver64_100.dll not found
2020-11-03 16:38:54.471392: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'cusparse64_100.dll'; dlerror: cusparse64_100.dll not found
2020-11-03 16:38:54.473057: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'cudnn64_7.dll'; dlerror: cudnn64_7.dll not found
2020-11-03 16:38:54.473271: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1662] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.
Skipping registering GPU devices...
2020-11-03 16:38:54.582913: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1180] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-11-03 16:38:54.583017: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1186]      0 
2020-11-03 16:38:54.583074: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1199] 0:   N 
Traceback (most recent call last):
  File "Object_detection_image.py", line 110, in <module>
    feed_dict={image_tensor: image_expanded})
  File "C:\Users\Dilshan\anaconda3\envs\tensorflow1\lib\site-packages\tensorflow_core\python\client\session.py", line 956, in run
    run_metadata_ptr)
  File "C:\Users\Dilshan\anaconda3\envs\tensorflow1\lib\site-packages\tensorflow_core\python\client\session.py", line 1149, in _run
    np_val = np.asarray(subfeed_val, dtype=subfeed_dtype)
  File "C:\Users\Dilshan\anaconda3\envs\tensorflow1\lib\site-packages\numpy\core\_asarray.py", line 85, in asarray
    return array(a, dtype, copy=False, order=order)
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
 {"timestamp":"2020-11-03T11:08:55.102Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T11:08:55.323Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T11:09:00.731Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T11:09:00.733Z"}
error: Object detection failed! {"timestamp":"2020-11-03T11:09:00.742Z"}
info: detectObjects @ story-creating-job end {"timestamp":"2020-11-03T11:09:00.745Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T11:09:00.750Z"}
info: Directory structure successfully created for job id 8319c8c0-1dc5-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T11:12:51.023Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T11:12:51.026Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T11:12:51.245Z"}
info: createNewStory @ story-creating-job begin for 8319c8c0-1dc5-11eb-81a9-3fd4887b93b1 {"timestamp":"2020-11-03T11:12:51.246Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T11:12:51.246Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T11:12:51.247Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T11:12:57.865Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T11:12:57.866Z"}
error: Character detection failed! {"timestamp":"2020-11-03T11:12:57.867Z"}
info: detectObjects @ story-creating-job begin {"timestamp":"2020-11-03T11:12:57.884Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T11:12:57.885Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T11:12:57.886Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T11:12:57.888Z"}
error: 2020-11-03 16:42:51.838979: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-11-03 16:42:56.456196: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
2020-11-03 16:42:56.458741: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library nvcuda.dll
2020-11-03 16:42:57.342165: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1639] Found device 0 with properties: 
name: GeForce GTX 1050 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.62
pciBusID: 0000:01:00.0
2020-11-03 16:42:57.342461: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_100.dll
2020-11-03 16:42:57.343918: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'cublas64_100.dll'; dlerror: cublas64_100.dll not found
2020-11-03 16:42:57.345133: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'cufft64_100.dll'; dlerror: cufft64_100.dll not found
2020-11-03 16:42:57.346408: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'curand64_100.dll'; dlerror: curand64_100.dll not found
2020-11-03 16:42:57.347478: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'cusolver64_100.dll'; dlerror: cusolver64_100.dll not found
2020-11-03 16:42:57.348545: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'cusparse64_100.dll'; dlerror: cusparse64_100.dll not found
2020-11-03 16:42:57.349629: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'cudnn64_7.dll'; dlerror: cudnn64_7.dll not found
2020-11-03 16:42:57.349792: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1662] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.
Skipping registering GPU devices...
2020-11-03 16:42:57.462698: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1180] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-11-03 16:42:57.462828: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1186]      0 
2020-11-03 16:42:57.462920: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1199] 0:   N 
Traceback (most recent call last):
  File "Object_detection_image.py", line 110, in <module>
    feed_dict={image_tensor: image_expanded})
  File "C:\Users\Dilshan\anaconda3\envs\tensorflow1\lib\site-packages\tensorflow_core\python\client\session.py", line 956, in run
    run_metadata_ptr)
  File "C:\Users\Dilshan\anaconda3\envs\tensorflow1\lib\site-packages\tensorflow_core\python\client\session.py", line 1149, in _run
    np_val = np.asarray(subfeed_val, dtype=subfeed_dtype)
  File "C:\Users\Dilshan\anaconda3\envs\tensorflow1\lib\site-packages\numpy\core\_asarray.py", line 85, in asarray
    return array(a, dtype, copy=False, order=order)
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
 {"timestamp":"2020-11-03T11:12:57.889Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T11:12:58.109Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T11:13:03.321Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T11:13:03.324Z"}
error: Object detection failed! {"timestamp":"2020-11-03T11:13:03.324Z"}
info: detectObjects @ story-creating-job end {"timestamp":"2020-11-03T11:13:03.350Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T11:13:03.350Z"}
info: Service is Running on port 3000 {"timestamp":"2020-11-03T12:07:32.824Z"}
info: Connected to MongoDB {"timestamp":"2020-11-03T12:07:34.758Z"}
info: User validate function executed successfully {"timestamp":"2020-11-03T12:08:24.844Z"}
info: User retrieved by username successfully {"timestamp":"2020-11-03T12:08:25.075Z"}
info: Directory structure successfully created for job id 4e73b880-1dcd-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:08:38.667Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T12:08:38.671Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T12:08:38.895Z"}
info: createNewStory @ story-creating-job begin for 4e73b880-1dcd-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:08:38.896Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T12:08:38.897Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:08:38.897Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:08:49.719Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:08:49.719Z"}
info: Character detection successful! {"timestamp":"2020-11-03T12:08:49.720Z"}
info: [
  {
    "Character": "Tintin: 99%",
    "bottom": "3549.999788403511",
    "left": "2.9821037750225514",
    "right": "1993.440543293953",
    "top": "619.6030281484127",
    "xmax": "0.88913494348526",
    "xmin": "0.0013301087310537696",
    "ymax": "0.9999999403953552",
    "ymin": "0.1745360642671585"
  }
] {"timestamp":"2020-11-03T12:08:49.721Z"}
info: detectObjects @ story-creating-job begin {"timestamp":"2020-11-03T12:08:49.722Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:08:49.723Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T12:08:49.724Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:08:58.166Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:08:58.167Z"}
info: Object detection successful! {"timestamp":"2020-11-03T12:08:58.170Z"}
info: [
  {
    "Object": "Hand Stick: 99%",
    "bottom": "2070.8961069583893",
    "left": "1748.5993082523346",
    "right": "2158.208116173744",
    "top": "754.0712743997574",
    "xmax": "0.9626262784004211",
    "xmin": "0.7799283266067505",
    "ymax": "0.5833510160446167",
    "ymin": "0.2124144434928894"
  }
] {"timestamp":"2020-11-03T12:08:58.171Z"}
info: segmentBallons @ balloon-segmentation-job begin {"timestamp":"2020-11-03T12:08:58.172Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:08:58.172Z"}
info: detectObjects @ story-creating-job end {"timestamp":"2020-11-03T12:08:58.174Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:09:05.670Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:09:05.671Z"}
info: Balloon segmentation successful! {"timestamp":"2020-11-03T12:09:05.674Z"}
info: Segmented image name : 2020-11-03T12-08-38.438Ztinitn_org_content.jpg {"timestamp":"2020-11-03T12:09:05.674Z"}
info: extractText @ OCR-job begin {"timestamp":"2020-11-03T12:09:05.675Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:09:05.677Z"}
info: segmentPanels @ panel-creating-job end {"timestamp":"2020-11-03T12:09:05.679Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:09:06.033Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:09:06.034Z"}
info: Text extraction successful! {"timestamp":"2020-11-03T12:09:06.036Z"}
info: {
  "output_filename": "OCR_2020-11-03T12-08-38.438Ztinitn_org_content.jpg.txt",
  "status": "success"
} {"timestamp":"2020-11-03T12:09:06.037Z"}
info: createCharacterAssociation @ balloon-segmentation-job begin {"timestamp":"2020-11-03T12:09:06.039Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:09:06.040Z"}
info: extractText @ OCR-job end {"timestamp":"2020-11-03T12:09:06.041Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:09:06.083Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:09:06.084Z"}
info: Character association  successful! {"timestamp":"2020-11-03T12:09:06.085Z"}
info: {
  "status": "success",
  "story": {
    "character": "Tintin",
    "speech": "Yay! We got the tickets\n\n/t's time to have fun.\n\n \n\f"
  }
} {"timestamp":"2020-11-03T12:09:06.086Z"}
info: buildStory @ story-building-job begin {"timestamp":"2020-11-03T12:09:06.088Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:09:06.089Z"}
info: createCharacterAssociation @ balloon-segmentation-job end {"timestamp":"2020-11-03T12:09:06.091Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:09:06.096Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:09:06.097Z"}
info: Story building successful! {"timestamp":"2020-11-03T12:09:06.097Z"}
info: "there is a Hand Stick and Tintin says Yay! We got the tickets  /t's time to have fun.." {"timestamp":"2020-11-03T12:09:06.098Z"}
info: buildStory @ story-building-job end {"timestamp":"2020-11-03T12:09:06.098Z"}
info: Story created for one panel successfully {"timestamp":"2020-11-03T12:09:06.099Z"}
info: {"original_image_name":"2020-11-03T12-08-38.438Ztinitn.jpg","characters":[{"Character":"Tintin: 99%","bottom":"3549.999788403511","left":"2.9821037750225514","right":"1993.440543293953","top":"619.6030281484127","xmax":"0.88913494348526","xmin":"0.0013301087310537696","ymax":"0.9999999403953552","ymin":"0.1745360642671585"}],"objects":[{"Object":"Hand Stick: 99%","bottom":"2070.8961069583893","left":"1748.5993082523346","right":"2158.208116173744","top":"754.0712743997574","xmax":"0.9626262784004211","xmin":"0.7799283266067505","ymax":"0.5833510160446167","ymin":"0.2124144434928894"}],"balloons":{"output_filename":{"output_binary_content":"2020-11-03T12-08-38.438Ztinitn_black_&_white.jpg","output_org_content":"2020-11-03T12-08-38.438Ztinitn_org_content.jpg","xdiff":0,"ydiff":187},"status":"success"},"text":{"output_filename":"OCR_2020-11-03T12-08-38.438Ztinitn_org_content.jpg.txt","status":"success"},"association":{"status":"success","story":{"character":"Tintin","speech":"Yay! We got the tickets\n\n/t's time to have fun.\n\n \n\f"}},"story":"there is a Hand Stick and Tintin says Yay! We got the tickets  /t's time to have fun.."} {"timestamp":"2020-11-03T12:09:06.099Z"}
info: [{"original_image_name":"2020-11-03T12-08-38.438Ztinitn.jpg","characters":[{"Character":"Tintin: 99%","bottom":"3549.999788403511","left":"2.9821037750225514","right":"1993.440543293953","top":"619.6030281484127","xmax":"0.88913494348526","xmin":"0.0013301087310537696","ymax":"0.9999999403953552","ymin":"0.1745360642671585"}],"objects":[{"Object":"Hand Stick: 99%","bottom":"2070.8961069583893","left":"1748.5993082523346","right":"2158.208116173744","top":"754.0712743997574","xmax":"0.9626262784004211","xmin":"0.7799283266067505","ymax":"0.5833510160446167","ymin":"0.2124144434928894"}],"balloons":{"output_filename":{"output_binary_content":"2020-11-03T12-08-38.438Ztinitn_black_&_white.jpg","output_org_content":"2020-11-03T12-08-38.438Ztinitn_org_content.jpg","xdiff":0,"ydiff":187},"status":"success"},"text":{"output_filename":"OCR_2020-11-03T12-08-38.438Ztinitn_org_content.jpg.txt","status":"success"},"association":{"status":"success","story":{"character":"Tintin","speech":"Yay! We got the tickets\n\n/t's time to have fun.\n\n \n\f"}},"story":"there is a Hand Stick and Tintin says Yay! We got the tickets  /t's time to have fun.."}] {"timestamp":"2020-11-03T12:09:06.100Z"}
info: Story extracted successfully! {"timestamp":"2020-11-03T12:09:06.101Z"}
info: "there is a Hand Stick and Tintin says Yay! We got the tickets  /t's time to have fun.." {"timestamp":"2020-11-03T12:09:06.102Z"}
info: Story saved in the text file successfully! {"timestamp":"2020-11-03T12:09:06.105Z"}
info: createAndSaveAudioStory @ create-audio-job begin {"timestamp":"2020-11-03T12:09:06.106Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:09:06.107Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:09:06.409Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:09:06.410Z"}
info: Audio story generation and saving successful! {"timestamp":"2020-11-03T12:09:06.411Z"}
info: createAndSaveAudioStory @ create-audio-job end {"timestamp":"2020-11-03T12:09:06.413Z"}
info: Job entry updated successfully for job id 4e73b880-1dcd-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:09:06.635Z"}
info: User validate function executed successfully {"timestamp":"2020-11-03T12:12:26.070Z"}
info: User retrieved by username successfully {"timestamp":"2020-11-03T12:12:26.301Z"}
info: Directory structure successfully created for job id e04c2580-1dcd-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:12:43.357Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T12:12:43.358Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T12:12:43.579Z"}
info: createNewStory @ story-creating-job begin for e04c2580-1dcd-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:12:43.580Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T12:12:43.580Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:12:43.581Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:12:53.760Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:12:53.761Z"}
info: Character detection successful! {"timestamp":"2020-11-03T12:12:53.762Z"}
info: [
  {
    "Character": "haddock: 99%",
    "bottom": "438.71906447410583",
    "left": "138.57100903987885",
    "right": "394.9615955352783",
    "top": "208.94774723052979",
    "xmax": "0.7899231910705566",
    "xmin": "0.2771420180797577",
    "ymax": "0.9374338984489441",
    "ymin": "0.4464695453643799"
  }
] {"timestamp":"2020-11-03T12:12:53.762Z"}
info: detectObjects @ story-creating-job begin {"timestamp":"2020-11-03T12:12:53.764Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:12:53.765Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T12:12:53.768Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:13:03.316Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:13:03.317Z"}
info: Object detection successful! {"timestamp":"2020-11-03T12:13:03.317Z"}
info: [
  {
    "Object": "Hand Stick: 85%",
    "bottom": "244.89892888069153",
    "left": "152.05664932727814",
    "right": "191.87553226947784",
    "top": "187.55566370487213",
    "xmax": "0.3837510645389557",
    "xmin": "0.3041132986545563",
    "ymax": "0.5232883095741272",
    "ymin": "0.4007599651813507"
  }
] {"timestamp":"2020-11-03T12:13:03.317Z"}
info: segmentBallons @ balloon-segmentation-job begin {"timestamp":"2020-11-03T12:13:03.318Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:13:03.319Z"}
info: detectObjects @ story-creating-job end {"timestamp":"2020-11-03T12:13:03.319Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:13:09.690Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:13:09.693Z"}
info: Balloon segmentation successful! {"timestamp":"2020-11-03T12:13:09.694Z"}
info: Segmented image name : 2020-11-03T12-12-43.125Ztestimage_org_content.jpg {"timestamp":"2020-11-03T12:13:09.695Z"}
info: extractText @ OCR-job begin {"timestamp":"2020-11-03T12:13:09.696Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:13:09.696Z"}
info: segmentPanels @ panel-creating-job end {"timestamp":"2020-11-03T12:13:09.697Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:13:10.101Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:13:10.102Z"}
info: Text extraction successful! {"timestamp":"2020-11-03T12:13:10.103Z"}
info: {
  "output_filename": "OCR_2020-11-03T12-12-43.125Ztestimage_org_content.jpg.txt",
  "status": "success"
} {"timestamp":"2020-11-03T12:13:10.104Z"}
info: createCharacterAssociation @ balloon-segmentation-job begin {"timestamp":"2020-11-03T12:13:10.104Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:13:10.105Z"}
info: extractText @ OCR-job end {"timestamp":"2020-11-03T12:13:10.107Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:13:10.150Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:13:10.151Z"}
info: Character association  successful! {"timestamp":"2020-11-03T12:13:10.152Z"}
info: {
  "status": "success",
  "story": {
    "character": "haddock",
    "speech": "  \n    \n\n  \n\nan immunity to\ngunshot wounds:\n\f"
  }
} {"timestamp":"2020-11-03T12:13:10.153Z"}
info: buildStory @ story-building-job begin {"timestamp":"2020-11-03T12:13:10.154Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:13:10.154Z"}
info: createCharacterAssociation @ balloon-segmentation-job end {"timestamp":"2020-11-03T12:13:10.155Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:13:10.163Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:13:10.163Z"}
info: Story building successful! {"timestamp":"2020-11-03T12:13:10.164Z"}
info: "there is a Hand Stick and haddock says an immunity to gunshot wounds:." {"timestamp":"2020-11-03T12:13:10.164Z"}
info: buildStory @ story-building-job end {"timestamp":"2020-11-03T12:13:10.165Z"}
info: Story created for one panel successfully {"timestamp":"2020-11-03T12:13:10.165Z"}
info: {"original_image_name":"2020-11-03T12-12-43.125Ztestimage.jpg","characters":[{"Character":"haddock: 99%","bottom":"438.71906447410583","left":"138.57100903987885","right":"394.9615955352783","top":"208.94774723052979","xmax":"0.7899231910705566","xmin":"0.2771420180797577","ymax":"0.9374338984489441","ymin":"0.4464695453643799"}],"objects":[{"Object":"Hand Stick: 85%","bottom":"244.89892888069153","left":"152.05664932727814","right":"191.87553226947784","top":"187.55566370487213","xmax":"0.3837510645389557","xmin":"0.3041132986545563","ymax":"0.5232883095741272","ymin":"0.4007599651813507"}],"balloons":{"output_filename":{"output_binary_content":"2020-11-03T12-12-43.125Ztestimage_black_&_white.jpg","output_org_content":"2020-11-03T12-12-43.125Ztestimage_org_content.jpg","xdiff":0,"ydiff":282},"status":"success"},"text":{"output_filename":"OCR_2020-11-03T12-12-43.125Ztestimage_org_content.jpg.txt","status":"success"},"association":{"status":"success","story":{"character":"haddock","speech":"  \n    \n\n  \n\nan immunity to\ngunshot wounds:\n\f"}},"story":"there is a Hand Stick and haddock says an immunity to gunshot wounds:."} {"timestamp":"2020-11-03T12:13:10.165Z"}
info: [{"original_image_name":"2020-11-03T12-12-43.125Ztestimage.jpg","characters":[{"Character":"haddock: 99%","bottom":"438.71906447410583","left":"138.57100903987885","right":"394.9615955352783","top":"208.94774723052979","xmax":"0.7899231910705566","xmin":"0.2771420180797577","ymax":"0.9374338984489441","ymin":"0.4464695453643799"}],"objects":[{"Object":"Hand Stick: 85%","bottom":"244.89892888069153","left":"152.05664932727814","right":"191.87553226947784","top":"187.55566370487213","xmax":"0.3837510645389557","xmin":"0.3041132986545563","ymax":"0.5232883095741272","ymin":"0.4007599651813507"}],"balloons":{"output_filename":{"output_binary_content":"2020-11-03T12-12-43.125Ztestimage_black_&_white.jpg","output_org_content":"2020-11-03T12-12-43.125Ztestimage_org_content.jpg","xdiff":0,"ydiff":282},"status":"success"},"text":{"output_filename":"OCR_2020-11-03T12-12-43.125Ztestimage_org_content.jpg.txt","status":"success"},"association":{"status":"success","story":{"character":"haddock","speech":"  \n    \n\n  \n\nan immunity to\ngunshot wounds:\n\f"}},"story":"there is a Hand Stick and haddock says an immunity to gunshot wounds:."}] {"timestamp":"2020-11-03T12:13:10.166Z"}
info: Story extracted successfully! {"timestamp":"2020-11-03T12:13:10.167Z"}
info: "there is a Hand Stick and haddock says an immunity to gunshot wounds:." {"timestamp":"2020-11-03T12:13:10.168Z"}
info: Story saved in the text file successfully! {"timestamp":"2020-11-03T12:13:10.169Z"}
info: createAndSaveAudioStory @ create-audio-job begin {"timestamp":"2020-11-03T12:13:10.171Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:13:10.171Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:13:10.494Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:13:10.495Z"}
info: Audio story generation and saving successful! {"timestamp":"2020-11-03T12:13:10.496Z"}
info: createAndSaveAudioStory @ create-audio-job end {"timestamp":"2020-11-03T12:13:10.497Z"}
info: Job entry updated successfully for job id e04c2580-1dcd-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:13:10.715Z"}
info: Directory structure successfully created for job id f4da4380-1dd0-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:34:46.333Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T12:34:46.335Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T12:34:46.553Z"}
info: createNewStory @ story-creating-job begin for f4da4380-1dd0-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:34:46.554Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T12:34:46.554Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:34:46.555Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:34:57.786Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:34:57.790Z"}
info: Character detection successful! {"timestamp":"2020-11-03T12:34:57.791Z"}
info: [
  {
    "Character": "thomson: 99%",
    "bottom": "816.2773993015289",
    "left": "235.82965046167374",
    "right": "807.5224029421806",
    "top": "367.2754756808281",
    "xmax": "0.951145350933075",
    "xmin": "0.2777734398841858",
    "ymax": "0.9694505929946899",
    "ymin": "0.43619415163993835"
  }
] {"timestamp":"2020-11-03T12:34:57.791Z"}
info: detectObjects @ story-creating-job begin {"timestamp":"2020-11-03T12:34:57.792Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:34:57.792Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T12:34:57.793Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:35:07.324Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:35:07.324Z"}
info: Object detection successful! {"timestamp":"2020-11-03T12:35:07.326Z"}
info: [] {"timestamp":"2020-11-03T12:35:07.327Z"}
info: segmentBallons @ balloon-segmentation-job begin {"timestamp":"2020-11-03T12:35:07.328Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:35:07.329Z"}
info: detectObjects @ story-creating-job end {"timestamp":"2020-11-03T12:35:07.330Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:35:14.080Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:35:14.082Z"}
info: Balloon segmentation successful! {"timestamp":"2020-11-03T12:35:14.083Z"}
info: Segmented image name : 2020-11-03T12-34-46.096Zthomson18_org_content.jpg {"timestamp":"2020-11-03T12:35:14.084Z"}
info: extractText @ OCR-job begin {"timestamp":"2020-11-03T12:35:14.084Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:35:14.085Z"}
info: segmentPanels @ panel-creating-job end {"timestamp":"2020-11-03T12:35:14.086Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:35:14.950Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:35:14.953Z"}
info: Text extraction successful! {"timestamp":"2020-11-03T12:35:14.953Z"}
info: {
  "output_filename": "OCR_2020-11-03T12-34-46.096Zthomson18_org_content.jpg.txt",
  "status": "success"
} {"timestamp":"2020-11-03T12:35:14.954Z"}
info: createCharacterAssociation @ balloon-segmentation-job begin {"timestamp":"2020-11-03T12:35:14.954Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:35:14.955Z"}
info: extractText @ OCR-job end {"timestamp":"2020-11-03T12:35:14.955Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:35:14.987Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:35:14.988Z"}
info: Character association  successful! {"timestamp":"2020-11-03T12:35:14.989Z"}
info: {
  "status": "success",
  "story": {
    "character": "thomson",
    "speech": " \n   \n \n    \n  \n\nTintin, were trying to solve\na case. Do you know what\nhappens when you interfere\n\nith a police jamspctigation®\n\nUhh... The case\ngets solved?\n\n  \n\n   \n\f"
  }
} {"timestamp":"2020-11-03T12:35:14.990Z"}
info: buildStory @ story-building-job begin {"timestamp":"2020-11-03T12:35:14.996Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:35:15.000Z"}
info: createCharacterAssociation @ balloon-segmentation-job end {"timestamp":"2020-11-03T12:35:15.003Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:35:15.012Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:35:15.012Z"}
info: Story building successful! {"timestamp":"2020-11-03T12:35:15.013Z"}
info: "thomson says Tintin, were trying to solve a case. Do you know what happens when you interfere  ith a police jamspctigation®  Uhh... The case gets solved?." {"timestamp":"2020-11-03T12:35:15.014Z"}
info: buildStory @ story-building-job end {"timestamp":"2020-11-03T12:35:15.014Z"}
info: Story created for one panel successfully {"timestamp":"2020-11-03T12:35:15.015Z"}
info: {"original_image_name":"2020-11-03T12-34-46.096Zthomson18.jpg","characters":[{"Character":"thomson: 99%","bottom":"816.2773993015289","left":"235.82965046167374","right":"807.5224029421806","top":"367.2754756808281","xmax":"0.951145350933075","xmin":"0.2777734398841858","ymax":"0.9694505929946899","ymin":"0.43619415163993835"}],"objects":[],"balloons":{"output_filename":{"output_binary_content":"2020-11-03T12-34-46.096Zthomson18_black_&_white.jpg","output_org_content":"2020-11-03T12-34-46.096Zthomson18_org_content.jpg","xdiff":0,"ydiff":431},"status":"success"},"text":{"output_filename":"OCR_2020-11-03T12-34-46.096Zthomson18_org_content.jpg.txt","status":"success"},"association":{"status":"success","story":{"character":"thomson","speech":" \n   \n \n    \n  \n\nTintin, were trying to solve\na case. Do you know what\nhappens when you interfere\n\nith a police jamspctigation®\n\nUhh... The case\ngets solved?\n\n  \n\n   \n\f"}},"story":"thomson says Tintin, were trying to solve a case. Do you know what happens when you interfere  ith a police jamspctigation®  Uhh... The case gets solved?."} {"timestamp":"2020-11-03T12:35:15.018Z"}
info: [{"original_image_name":"2020-11-03T12-34-46.096Zthomson18.jpg","characters":[{"Character":"thomson: 99%","bottom":"816.2773993015289","left":"235.82965046167374","right":"807.5224029421806","top":"367.2754756808281","xmax":"0.951145350933075","xmin":"0.2777734398841858","ymax":"0.9694505929946899","ymin":"0.43619415163993835"}],"objects":[],"balloons":{"output_filename":{"output_binary_content":"2020-11-03T12-34-46.096Zthomson18_black_&_white.jpg","output_org_content":"2020-11-03T12-34-46.096Zthomson18_org_content.jpg","xdiff":0,"ydiff":431},"status":"success"},"text":{"output_filename":"OCR_2020-11-03T12-34-46.096Zthomson18_org_content.jpg.txt","status":"success"},"association":{"status":"success","story":{"character":"thomson","speech":" \n   \n \n    \n  \n\nTintin, were trying to solve\na case. Do you know what\nhappens when you interfere\n\nith a police jamspctigation®\n\nUhh... The case\ngets solved?\n\n  \n\n   \n\f"}},"story":"thomson says Tintin, were trying to solve a case. Do you know what happens when you interfere  ith a police jamspctigation®  Uhh... The case gets solved?."}] {"timestamp":"2020-11-03T12:35:15.019Z"}
info: Story extracted successfully! {"timestamp":"2020-11-03T12:35:15.021Z"}
info: "thomson says Tintin, were trying to solve a case. Do you know what happens when you interfere  ith a police jamspctigation®  Uhh... The case gets solved?." {"timestamp":"2020-11-03T12:35:15.021Z"}
info: Story saved in the text file successfully! {"timestamp":"2020-11-03T12:35:15.024Z"}
info: createAndSaveAudioStory @ create-audio-job begin {"timestamp":"2020-11-03T12:35:15.025Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:35:15.025Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:35:15.427Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:35:15.428Z"}
info: Audio story generation and saving successful! {"timestamp":"2020-11-03T12:35:15.430Z"}
info: createAndSaveAudioStory @ create-audio-job end {"timestamp":"2020-11-03T12:35:15.431Z"}
info: Job entry updated successfully for job id f4da4380-1dd0-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:35:15.649Z"}
info: Directory structure successfully created for job id 3dc96030-1dd1-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:36:48.694Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T12:36:48.696Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T12:36:48.914Z"}
info: createNewStory @ story-creating-job begin for 3dc96030-1dd1-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:36:48.914Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T12:36:48.915Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:36:48.915Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:36:59.564Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:36:59.566Z"}
info: Character detection successful! {"timestamp":"2020-11-03T12:36:59.571Z"}
info: [
  {
    "Character": "snovy: 99%",
    "bottom": "172.13315504789352",
    "left": "7.402661293745041",
    "right": "97.48329162597656",
    "top": "87.1151077747345",
    "xmax": "0.8123607635498047",
    "xmin": "0.06168884411454201",
    "ymax": "0.9949893355369568",
    "ymin": "0.5035555362701416"
  }
] {"timestamp":"2020-11-03T12:36:59.572Z"}
info: detectObjects @ story-creating-job begin {"timestamp":"2020-11-03T12:36:59.573Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:36:59.574Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T12:36:59.576Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:37:09.231Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:37:09.233Z"}
info: Object detection successful! {"timestamp":"2020-11-03T12:37:09.234Z"}
info: [
  {
    "Object": "Hand Stick: 99%",
    "bottom": "83.64174723625183",
    "left": "93.88291597366333",
    "right": "104.83036279678345",
    "top": "63.64473804831505",
    "xmax": "0.8735863566398621",
    "xmin": "0.7823576331138611",
    "ymax": "0.483478307723999",
    "ymin": "0.3678886592388153"
  }
] {"timestamp":"2020-11-03T12:37:09.242Z"}
info: segmentBallons @ balloon-segmentation-job begin {"timestamp":"2020-11-03T12:37:09.245Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:37:09.246Z"}
info: detectObjects @ story-creating-job end {"timestamp":"2020-11-03T12:37:09.247Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:37:14.997Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:37:14.998Z"}
info: Balloon segmentation successful! {"timestamp":"2020-11-03T12:37:14.999Z"}
info: Segmented image name : 2020-11-03T12-36-48.474Z1_org_content.jpg {"timestamp":"2020-11-03T12:37:15.000Z"}
info: extractText @ OCR-job begin {"timestamp":"2020-11-03T12:37:15.000Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:37:15.001Z"}
info: segmentPanels @ panel-creating-job end {"timestamp":"2020-11-03T12:37:15.002Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:37:15.364Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:37:15.364Z"}
info: Text extraction successful! {"timestamp":"2020-11-03T12:37:15.365Z"}
info: {
  "output_filename": "OCR_2020-11-03T12-36-48.474Z1_org_content.jpg.txt",
  "status": "success"
} {"timestamp":"2020-11-03T12:37:15.367Z"}
info: createCharacterAssociation @ balloon-segmentation-job begin {"timestamp":"2020-11-03T12:37:15.369Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:37:15.371Z"}
info: extractText @ OCR-job end {"timestamp":"2020-11-03T12:37:15.382Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:37:15.421Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:37:15.422Z"}
error: Character association  failed - local variable 'M' referenced before assignment {"timestamp":"2020-11-03T12:37:15.423Z"}
info: createCharacterAssociation @ balloon-segmentation-job end {"timestamp":"2020-11-03T12:37:15.424Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T12:37:15.425Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-11-03T12:37:15.425Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T12:37:15.427Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T12:37:15.644Z"}
info: Directory structure successfully created for job id 75a155d0-1dd1-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:38:22.389Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T12:38:22.391Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T12:38:22.610Z"}
info: createNewStory @ story-creating-job begin for 75a155d0-1dd1-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:38:22.611Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T12:38:22.611Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:38:22.612Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:38:54.250Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:38:54.251Z"}
info: Character detection successful! {"timestamp":"2020-11-03T12:38:54.251Z"}
info: [
  {
    "Character": "snovy: 99%",
    "bottom": "222.0",
    "left": "2.7475225823000073",
    "right": "160.81456887722015",
    "top": "77.59897720813751",
    "xmax": "0.7084342241287231",
    "xmin": "0.01210362371057272",
    "ymax": "1.0",
    "ymin": "0.3495449423789978"
  }
] {"timestamp":"2020-11-03T12:38:54.252Z"}
info: detectObjects @ story-creating-job begin {"timestamp":"2020-11-03T12:38:54.254Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:38:54.257Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T12:38:54.258Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:39:04.632Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:39:04.633Z"}
info: Object detection successful! {"timestamp":"2020-11-03T12:39:04.634Z"}
info: [] {"timestamp":"2020-11-03T12:39:04.636Z"}
info: segmentBallons @ balloon-segmentation-job begin {"timestamp":"2020-11-03T12:39:04.638Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:39:04.639Z"}
info: detectObjects @ story-creating-job end {"timestamp":"2020-11-03T12:39:04.639Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:39:10.206Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:39:10.207Z"}
info: Balloon segmentation successful! {"timestamp":"2020-11-03T12:39:10.209Z"}
info: Segmented image name : 2020-11-03T12-38-22.160Z10_org_content.jpg {"timestamp":"2020-11-03T12:39:10.209Z"}
info: extractText @ OCR-job begin {"timestamp":"2020-11-03T12:39:10.209Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:39:10.209Z"}
info: segmentPanels @ panel-creating-job end {"timestamp":"2020-11-03T12:39:10.210Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:39:10.519Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:39:10.520Z"}
info: Text extraction successful! {"timestamp":"2020-11-03T12:39:10.521Z"}
info: {
  "output_filename": "OCR_2020-11-03T12-38-22.160Z10_org_content.jpg.txt",
  "status": "success"
} {"timestamp":"2020-11-03T12:39:10.522Z"}
info: createCharacterAssociation @ balloon-segmentation-job begin {"timestamp":"2020-11-03T12:39:10.524Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:39:10.525Z"}
info: extractText @ OCR-job end {"timestamp":"2020-11-03T12:39:10.526Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:39:10.562Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:39:10.564Z"}
error: Character association  failed - local variable 'M' referenced before assignment {"timestamp":"2020-11-03T12:39:10.566Z"}
info: createCharacterAssociation @ balloon-segmentation-job end {"timestamp":"2020-11-03T12:39:10.568Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T12:39:10.570Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-11-03T12:39:10.574Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T12:39:10.578Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T12:39:10.797Z"}
info: Directory structure successfully created for job id bf40d6c0-1dd1-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:40:25.904Z"}
info: Uploaded file successfully placed in the created file structure {"timestamp":"2020-11-03T12:40:25.906Z"}
info: Job entry created in DB successfully {"timestamp":"2020-11-03T12:40:26.127Z"}
info: createNewStory @ story-creating-job begin for bf40d6c0-1dd1-11eb-a0ba-554a3f284348 {"timestamp":"2020-11-03T12:40:26.128Z"}
info: detectCharacters @ CCR-job begin {"timestamp":"2020-11-03T12:40:26.129Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:40:26.130Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:40:37.658Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:40:37.658Z"}
info: Character detection successful! {"timestamp":"2020-11-03T12:40:37.659Z"}
info: [
  {
    "Character": "snovy: 99%",
    "bottom": "189.86012649536133",
    "left": "18.639441579580307",
    "right": "180.46092689037323",
    "top": "26.053438425064087",
    "xmax": "0.8020485639572144",
    "xmin": "0.08284196257591248",
    "ymax": "0.8475898504257202",
    "ymin": "0.1163099929690361"
  }
] {"timestamp":"2020-11-03T12:40:37.659Z"}
info: detectObjects @ story-creating-job begin {"timestamp":"2020-11-03T12:40:37.662Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:40:37.663Z"}
info: detectCharacters @ CCR-job end {"timestamp":"2020-11-03T12:40:37.666Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:40:47.325Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:40:47.325Z"}
info: Object detection successful! {"timestamp":"2020-11-03T12:40:47.327Z"}
info: [] {"timestamp":"2020-11-03T12:40:47.327Z"}
info: segmentBallons @ balloon-segmentation-job begin {"timestamp":"2020-11-03T12:40:47.328Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:40:47.331Z"}
info: detectObjects @ story-creating-job end {"timestamp":"2020-11-03T12:40:47.335Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:40:53.301Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:40:53.301Z"}
info: Balloon segmentation successful! {"timestamp":"2020-11-03T12:40:53.302Z"}
info: Segmented image name : 2020-11-03T12-40-25.681Z5_org_content.jpg {"timestamp":"2020-11-03T12:40:53.303Z"}
info: extractText @ OCR-job begin {"timestamp":"2020-11-03T12:40:53.303Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:40:53.303Z"}
info: segmentPanels @ panel-creating-job end {"timestamp":"2020-11-03T12:40:53.304Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:40:53.583Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:40:53.584Z"}
info: Text extraction successful! {"timestamp":"2020-11-03T12:40:53.585Z"}
info: {
  "output_filename": "OCR_2020-11-03T12-40-25.681Z5_org_content.jpg.txt",
  "status": "success"
} {"timestamp":"2020-11-03T12:40:53.585Z"}
info: createCharacterAssociation @ balloon-segmentation-job begin {"timestamp":"2020-11-03T12:40:53.586Z"}
info: post @ image-processing-service-client.helper start {"timestamp":"2020-11-03T12:40:53.587Z"}
info: extractText @ OCR-job end {"timestamp":"2020-11-03T12:40:53.588Z"}
info: Remarks : undefined {"timestamp":"2020-11-03T12:40:53.624Z"}
info: post @ image-processing-service-client.helper end {"timestamp":"2020-11-03T12:40:53.626Z"}
error: Character association  failed - local variable 'M' referenced before assignment {"timestamp":"2020-11-03T12:40:53.627Z"}
info: createCharacterAssociation @ balloon-segmentation-job end {"timestamp":"2020-11-03T12:40:53.629Z"}
error: create story for a panel failed! {"timestamp":"2020-11-03T12:40:53.630Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-11-03T12:40:53.631Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-11-03T12:40:53.632Z"}
info: Job failure updated in DB successfully {"timestamp":"2020-11-03T12:40:53.848Z"}
