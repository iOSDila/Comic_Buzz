error: Character detection failed! {"timestamp":"2020-09-22T13:06:35.910Z"}
error: create story for a panel failed! {"timestamp":"2020-09-22T13:06:35.912Z"}
error: 2020-09-22 18:36:31.777733: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cudart64_101.dll
Traceback (most recent call last):
  File "Object_detection_image.py", line 65, in <module>
    label_map = label_map_util.load_labelmap(PATH_TO_LABELS)
  File "C:\Users\Dilshan\Desktop\Comic bu\Comic_Book_Image_Processing_Service\CCR\models\research\object_detection\utils\label_map_util.py", line 132, in load_labelmap
    with tf.gfile.GFile(path, 'r') as fid:
AttributeError: module 'tensorflow' has no attribute 'gfile'
 {"timestamp":"2020-09-22T13:06:35.913Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-22T13:06:37.403Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-22T13:16:41.297Z"}
error: create story for a panel failed! {"timestamp":"2020-09-22T13:16:41.298Z"}
error: Error: read ECONNRESET {"name":"RequestError","cause":{"errno":"ECONNRESET","code":"ECONNRESET","syscall":"read"},"error":{"errno":"ECONNRESET","code":"ECONNRESET","syscall":"read"},"options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-09-22T13-14-22.424Z2019-11-11T18-11-49.229Zpage3.jpg0.jpg","job_id":"87e61d60-fcd5-11ea-aa12-697c7af5d69b"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"timestamp":"2020-09-22T13:16:41.299Z"}
error: Character detection failed! {"timestamp":"2020-09-22T13:17:50.564Z"}
error: create story for a panel failed! {"timestamp":"2020-09-22T13:17:50.574Z"}
error: 2020-09-22 18:47:46.066674: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cudart64_101.dll
Traceback (most recent call last):
  File "Object_detection_image.py", line 70, in <module>
    config = tf.ConfigProto()
AttributeError: module 'tensorflow' has no attribute 'ConfigProto'
 {"timestamp":"2020-09-22T13:17:50.574Z"}
error: Object detection failed! {"timestamp":"2020-09-22T13:17:55.868Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-22T13:17:55.869Z"}
error: Character detection failed! {"timestamp":"2020-09-22T13:20:24.601Z"}
error: create story for a panel failed! {"timestamp":"2020-09-22T13:20:24.603Z"}
error: 2020-09-22 18:50:20.040269: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cudart64_101.dll
Traceback (most recent call last):
  File "Object_detection_image.py", line 70, in <module>
    config = tf.ConfigProto()
AttributeError: module 'tensorflow' has no attribute 'ConfigProto'
 {"timestamp":"2020-09-22T13:20:24.604Z"}
error: Object detection failed! {"timestamp":"2020-09-22T13:20:30.272Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-22T13:20:30.276Z"}
error: Character detection failed! {"timestamp":"2020-09-22T13:26:34.594Z"}
error: create story for a panel failed! {"timestamp":"2020-09-22T13:26:34.597Z"}
error: 2020-09-22 18:56:29.979638: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cudart64_101.dll
Traceback (most recent call last):
  File "Object_detection_image.py", line 76, in <module>
    od_graph_def = tf.GraphDef()
AttributeError: module 'tensorflow' has no attribute 'GraphDef'
 {"timestamp":"2020-09-22T13:26:34.597Z"}
error: Object detection failed! {"timestamp":"2020-09-22T13:26:40.065Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-22T13:26:40.068Z"}
error: Audio story generation/saving failed! {"timestamp":"2020-09-22T13:34:14.375Z"}
error: Failed to connect. Probable cause: Host 'https://translate.google.en/' is not reachable {"timestamp":"2020-09-22T13:34:14.375Z"}
error: Audio story generation/saving failed! {"timestamp":"2020-09-22T13:42:41.549Z"}
error: Failed to connect. Probable cause: Host 'https://translate.google.en/' is not reachable {"timestamp":"2020-09-22T13:42:41.550Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-22T13:44:36.515Z"}
error: create story for a panel failed! {"timestamp":"2020-09-22T13:44:36.515Z"}
error: Error: read ECONNRESET {"name":"RequestError","cause":{"errno":"ECONNRESET","code":"ECONNRESET","syscall":"read"},"error":{"errno":"ECONNRESET","code":"ECONNRESET","syscall":"read"},"options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-09-22T13-44-26.850Z2019-11-11T18-11-49.229Zpage3.jpg","job_id":"bb6cbd70-fcd9-11ea-aa12-697c7af5d69b"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"timestamp":"2020-09-22T13:44:36.515Z"}
error: Audio story generation/saving failed! {"timestamp":"2020-09-22T13:47:35.464Z"}
error: Failed to connect. Probable cause: Host 'https://translate.google.en/' is not reachable {"timestamp":"2020-09-22T13:47:35.464Z"}
error: Audio story generation/saving failed! {"timestamp":"2020-09-22T13:50:56.368Z"}
error: Failed to connect. Probable cause: Host 'https://translate.google.en/' is not reachable {"timestamp":"2020-09-22T13:50:56.368Z"}
error: Audio story generation/saving failed! {"timestamp":"2020-09-22T14:04:19.596Z"}
error: Failed to connect. Probable cause: Host 'https://translate.google.en/' is not reachable {"timestamp":"2020-09-22T14:04:19.597Z"}
error: Audio story generation/saving failed! {"timestamp":"2020-09-22T14:13:08.856Z"}
error: Failed to connect. Probable cause: Host 'https://translate.google.en/' is not reachable {"timestamp":"2020-09-22T14:13:08.856Z"}
error: Audio story generation/saving failed! {"timestamp":"2020-09-23T15:09:12.643Z"}
error: Failed to connect. Probable cause: Host 'https://translate.google.en/' is not reachable {"timestamp":"2020-09-23T15:09:12.643Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-23T15:31:23.596Z"}
error: create story for a panel failed! {"timestamp":"2020-09-23T15:31:23.597Z"}
error: Error: read ECONNRESET {"name":"RequestError","cause":{"errno":"ECONNRESET","code":"ECONNRESET","syscall":"read"},"error":{"errno":"ECONNRESET","code":"ECONNRESET","syscall":"read"},"options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-09-23T15-31-11.384Ztest.jpg","job_id":"cf3cf9e0-fdb1-11ea-8294-495f3a6d69e8"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"timestamp":"2020-09-23T15:31:23.598Z"}
error: Character association  failed - No characters detected {"timestamp":"2020-09-23T15:38:40.722Z"}
error: create story for a panel failed! {"timestamp":"2020-09-23T15:38:40.727Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-09-23T15:38:40.727Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-23T15:38:40.728Z"}
error: Character detection failed! {"timestamp":"2020-09-23T15:41:32.745Z"}
error: create story for a panel failed! {"timestamp":"2020-09-23T15:41:32.747Z"}
error: 2020-09-23 21:11:26.859642: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cudart64_101.dll
2020-09-23 21:11:31.882803: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN)to use the following CPU instructions in performance-critical operations:  AVX2
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2020-09-23 21:11:31.891579: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x23263006b70 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-09-23 21:11:31.892539: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
2020-09-23 21:11:31.893853: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library nvcuda.dll
2020-09-23 21:11:32.189520: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 0 with properties: 
pciBusID: 0000:01:00.0 name: GeForce GTX 1050 Ti computeCapability: 6.1
coreClock: 1.62GHz coreCount: 6 deviceMemorySize: 4.00GiB deviceMemoryBandwidth: 104.43GiB/s
2020-09-23 21:11:32.190073: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library cudart64_101.dll
2020-09-23 21:11:32.191928: W tensorflow/stream_executor/platform/default/dso_loader.cc:59] Could not load dynamic library 'cublas64_10.dll'; dlerror: cublas64_10.dll not found
2020-09-23 21:11:32.193525: W tensorflow/stream_executor/platform/default/dso_loader.cc:59] Could not load dynamic library 'cufft64_10.dll'; dlerror: cufft64_10.dll not found
2020-09-23 21:11:32.195099: W tensorflow/stream_executor/platform/default/dso_loader.cc:59] Could not load dynamic library 'curand64_10.dll'; dlerror: curand64_10.dll not found
2020-09-23 21:11:32.196727: W tensorflow/stream_executor/platform/default/dso_loader.cc:59] Could not load dynamic library 'cusolver64_10.dll'; dlerror: cusolver64_10.dll not found
2020-09-23 21:11:32.198424: W tensorflow/stream_executor/platform/default/dso_loader.cc:59] Could not load dynamic library 'cusparse64_10.dll'; dlerror: cusparse64_10.dll not found
2020-09-23 21:11:32.200341: W tensorflow/stream_executor/platform/default/dso_loader.cc:59] Could not load dynamic library 'cudnn64_7.dll'; dlerror: cudnn64_7.dll not found
2020-09-23 21:11:32.200688: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1753] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.
Skipping registering GPU devices...
2020-09-23 21:11:32.313783: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1257] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-09-23 21:11:32.314122: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1263]      0 
2020-09-23 21:11:32.314256: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1276] 0:   N 
2020-09-23 21:11:32.317416: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x23262dd6b80 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:
2020-09-23 21:11:32.317797: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): GeForce GTX 1050 Ti, Compute Capability 6.1
Traceback (most recent call last):
  File "Object_detection_image.py", line 110, in <module>
    feed_dict={image_tensor: image_expanded})
  File "C:\Users\Dilshan\anaconda3\lib\site-packages\tensorflow\python\client\session.py", line 958, in run
    run_metadata_ptr)
  File "C:\Users\Dilshan\anaconda3\lib\site-packages\tensorflow\python\client\session.py", line 1150, in _run
    np_val = np.asarray(subfeed_val, dtype=subfeed_dtype)
  File "C:\Users\Dilshan\anaconda3\lib\site-packages\numpy\core\_asarray.py", line 85, in asarray
    return array(a, dtype, copy=False, order=order)
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
 {"timestamp":"2020-09-23T15:41:32.748Z"}
error: Object detection failed! {"timestamp":"2020-09-23T15:41:39.347Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-23T15:41:39.348Z"}
error: Character association  failed - local variable 'M' referenced before assignment {"timestamp":"2020-09-23T15:44:49.127Z"}
error: create story for a panel failed! {"timestamp":"2020-09-23T15:44:49.131Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-09-23T15:44:49.134Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-23T15:44:49.136Z"}
error: Character association  failed - local variable 'M' referenced before assignment {"timestamp":"2020-09-23T15:50:39.244Z"}
error: create story for a panel failed! {"timestamp":"2020-09-23T15:50:39.249Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-09-23T15:50:39.250Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-23T15:50:39.251Z"}
error: Character association  failed - local variable 'M' referenced before assignment {"timestamp":"2020-09-23T15:57:47.710Z"}
error: create story for a panel failed! {"timestamp":"2020-09-23T15:57:47.712Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-09-23T15:57:47.712Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-23T15:57:47.713Z"}
error: Character association  failed - local variable 'M' referenced before assignment {"timestamp":"2020-09-23T18:02:05.132Z"}
error: create story for a panel failed! {"timestamp":"2020-09-23T18:02:05.134Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-09-23T18:02:05.135Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-23T18:02:05.136Z"}
error: Character association  failed - local variable 'M' referenced before assignment {"timestamp":"2020-09-23T18:32:46.669Z"}
error: create story for a panel failed! {"timestamp":"2020-09-23T18:32:46.675Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-09-23T18:32:46.675Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-23T18:32:46.676Z"}
error: Character association  failed - local variable 'M' referenced before assignment {"timestamp":"2020-09-24T02:40:36.976Z"}
error: create story for a panel failed! {"timestamp":"2020-09-24T02:40:36.979Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-09-24T02:40:36.980Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-24T02:40:36.984Z"}
error: Character association  failed - No characters detected {"timestamp":"2020-09-24T02:45:54.058Z"}
error: create story for a panel failed! {"timestamp":"2020-09-24T02:45:54.061Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-09-24T02:45:54.064Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-24T02:45:54.067Z"}
error: Character association  failed - local variable 'M' referenced before assignment {"timestamp":"2020-09-24T02:53:22.396Z"}
error: create story for a panel failed! {"timestamp":"2020-09-24T02:53:22.397Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-09-24T02:53:22.397Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-24T02:53:22.399Z"}
error: Character association  failed - local variable 'M' referenced before assignment {"timestamp":"2020-09-24T03:00:40.523Z"}
error: create story for a panel failed! {"timestamp":"2020-09-24T03:00:40.525Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-09-24T03:00:40.525Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-24T03:00:40.526Z"}
error: Character association  failed - local variable 'M' referenced before assignment {"timestamp":"2020-09-24T03:03:48.080Z"}
error: create story for a panel failed! {"timestamp":"2020-09-24T03:03:48.082Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-09-24T03:03:48.084Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-24T03:03:48.085Z"}
error: Story building failed - No Text Story created {"timestamp":"2020-09-24T03:25:06.501Z"}
error: Character association  failed - No characters detected {"timestamp":"2020-09-24T03:42:37.935Z"}
error: create story for a panel failed! {"timestamp":"2020-09-24T03:42:37.939Z"}
error: CHAR_ASSOCIATION_PARTIALLY_FAILED {"timestamp":"2020-09-24T03:42:37.940Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-24T03:42:37.941Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-24T05:41:08.550Z"}
error: create story for a panel failed! {"timestamp":"2020-09-24T05:41:08.550Z"}
error: Error: connect ECONNREFUSED 127.0.0.1:3001 {"name":"RequestError","cause":{"errno":"ECONNREFUSED","code":"ECONNREFUSED","syscall":"connect","address":"127.0.0.1","port":3001},"error":{"errno":"ECONNREFUSED","code":"ECONNREFUSED","syscall":"connect","address":"127.0.0.1","port":3001},"options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/character/start","body":{"image_file_name":"2020-09-24T05-41-07.094Ztest.jpg","job_id":"8b0b9340-fe28-11ea-a0ca-219ff46d1d47"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"timestamp":"2020-09-24T05:41:08.551Z"}
error: [story-creating-job] : createStoryForPanel failed  {"timestamp":"2020-09-24T05:46:44.924Z"}
error: create story for a panel failed! {"timestamp":"2020-09-24T05:46:44.925Z"}
error: 500 - "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>PIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg' // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2599257962504,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"ayKb7bX4D10Uf5aJybVu\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>PIL.UnidentifiedImageError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">PIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg'</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2599257962632\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962696\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962824\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962952\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963080\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962888\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963272\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963336\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963400\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962760\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963464\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963016\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963144\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\controllers\\balloon_controller.py\"</cite>,\n      line <em class=\"line\">21</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>request_body = request.get_json()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>balloon_binary_image = request_body[&quot;input_binary_image&quot;]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>job_id = request_body[&quot;job_id&quot;]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>return jsonify({'status': 'success',</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>'output_filename': json.loads(</pre>\n<pre class=\"line current\"><span class=\"ws\">                            </span>str(predict.predict(job_id, balloon_binary_image)).replace(&quot;\\'&quot;, &quot;\\&quot;&quot;))})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963208\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\Balloon_Segmentation\\predict.py\"</cite>,\n      line <em class=\"line\">33</em>,\n      in <code class=\"function\">predict</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>returned_output_binary = splitext(image)[0] + '_black_&amp;_white' + splitext(image)[1]</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>image = './resources/' + job_id + '/images/original/' + image</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># fixing the image to a ratio</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>old_im = Image.open(image)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>old_size = old_im.size</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>x = old_size[0]</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>y = int((x * 3) / 2)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\PIL\\Image.py\"</cite>,\n      line <em class=\"line\">2931</em>,\n      in <code class=\"function\">open</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>if exclusive_fp:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>fp.close()</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>for message in accept_warnings:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>warnings.warn(message)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>raise UnidentifiedImageError(</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>&quot;cannot identify image file %r&quot; % (filename if filename else fp)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>#</pre>\n<pre class=\"line after\"><span class=\"ws\"></span># Image processing.</pre></div>\n</div>\n</ul>\n  <blockquote>PIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg'</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\controllers\\balloon_controller.py&quot;, line 21, in post\n    str(predict.predict(job_id, balloon_binary_image)).replace(&quot;\\'&quot;, &quot;\\&quot;&quot;))})\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\Balloon_Segmentation\\predict.py&quot;, line 33, in predict\n    old_im = Image.open(image)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\PIL\\Image.py&quot;, line 2931, in open\n    &quot;cannot identify image file %r&quot; % (filename if filename else fp)\nPIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg'</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\controllers\\balloon_controller.py\", line 21, in post\n    str(predict.predict(job_id, balloon_binary_image)).replace(\"\\'\", \"\\\"\"))})\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\Balloon_Segmentation\\predict.py\", line 33, in predict\n    old_im = Image.open(image)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\PIL\\Image.py\", line 2931, in open\n    \"cannot identify image file %r\" % (filename if filename else fp)\nPIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg'\n\n-->\n" {"name":"StatusCodeError","statusCode":500,"error":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>PIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg' // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2599257962504,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"ayKb7bX4D10Uf5aJybVu\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>PIL.UnidentifiedImageError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">PIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg'</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2599257962632\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962696\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962824\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962952\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963080\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962888\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963272\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963336\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963400\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962760\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963464\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963016\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963144\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\controllers\\balloon_controller.py\"</cite>,\n      line <em class=\"line\">21</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>request_body = request.get_json()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>balloon_binary_image = request_body[&quot;input_binary_image&quot;]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>job_id = request_body[&quot;job_id&quot;]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>return jsonify({'status': 'success',</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>'output_filename': json.loads(</pre>\n<pre class=\"line current\"><span class=\"ws\">                            </span>str(predict.predict(job_id, balloon_binary_image)).replace(&quot;\\'&quot;, &quot;\\&quot;&quot;))})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963208\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\Balloon_Segmentation\\predict.py\"</cite>,\n      line <em class=\"line\">33</em>,\n      in <code class=\"function\">predict</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>returned_output_binary = splitext(image)[0] + '_black_&amp;_white' + splitext(image)[1]</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>image = './resources/' + job_id + '/images/original/' + image</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># fixing the image to a ratio</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>old_im = Image.open(image)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>old_size = old_im.size</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>x = old_size[0]</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>y = int((x * 3) / 2)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\PIL\\Image.py\"</cite>,\n      line <em class=\"line\">2931</em>,\n      in <code class=\"function\">open</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>if exclusive_fp:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>fp.close()</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>for message in accept_warnings:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>warnings.warn(message)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>raise UnidentifiedImageError(</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>&quot;cannot identify image file %r&quot; % (filename if filename else fp)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>#</pre>\n<pre class=\"line after\"><span class=\"ws\"></span># Image processing.</pre></div>\n</div>\n</ul>\n  <blockquote>PIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg'</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\controllers\\balloon_controller.py&quot;, line 21, in post\n    str(predict.predict(job_id, balloon_binary_image)).replace(&quot;\\'&quot;, &quot;\\&quot;&quot;))})\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\Balloon_Segmentation\\predict.py&quot;, line 33, in predict\n    old_im = Image.open(image)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\PIL\\Image.py&quot;, line 2931, in open\n    &quot;cannot identify image file %r&quot; % (filename if filename else fp)\nPIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg'</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\controllers\\balloon_controller.py\", line 21, in post\n    str(predict.predict(job_id, balloon_binary_image)).replace(\"\\'\", \"\\\"\"))})\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\Balloon_Segmentation\\predict.py\", line 33, in predict\n    old_im = Image.open(image)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\PIL\\Image.py\", line 2931, in open\n    \"cannot identify image file %r\" % (filename if filename else fp)\nPIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg'\n\n-->\n","options":{"method":"POST","uri":"http://localhost:3001/image_processing_service/recognize/ballons/start","body":{"input_binary_image":"2020-09-24T05-46-19.487Zsnowy.jpg","job_id":"453e5a90-fe29-11ea-a0ca-219ff46d1d47"},"headers":{"Content-Type":"application/json; charset=utf-8"},"json":true,"simple":true,"resolveWithFullResponse":false,"transform2xxOnly":false},"response":{"statusCode":500,"body":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>PIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg' // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 2599257962504,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"ayKb7bX4D10Uf5aJybVu\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>PIL.UnidentifiedImageError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">PIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg'</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-2599257962632\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962696\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962824\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962952\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963080\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962888\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963272\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963336\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">584</em>,\n      in <code class=\"function\">error_router</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if self._has_fr_route():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>return self.handle_error(e)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>pass  # Fall through to original handler</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return original_handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_error(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>Error handler for the API transforms a raised exception into a Flask response,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>with the appropriate HTTP status code and body.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963400\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257962760\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py\"</cite>,\n      line <em class=\"line\">38</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>from io import StringIO</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963464\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963592\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963656\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\"</cite>,\n      line <em class=\"line\">325</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:param resource: The resource as a flask view function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>'''</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>@wraps(resource)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>data, code, headers = unpack(resp)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963720\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\views.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">view</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>constructor of the class.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>def view(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self.dispatch_request(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if cls.decorators:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__name__ = name</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>view.__module__ = cls.__module__</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for decorator in cls.decorators:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963016\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\resource.py\"</cite>,\n      line <em class=\"line\">44</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>for decorator in self.method_decorators:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = decorator(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.validate_payload(meth)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>resp = meth(*args, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if isinstance(resp, BaseResponse):</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return resp</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>representations = self.representations or {}</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963144\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\controllers\\balloon_controller.py\"</cite>,\n      line <em class=\"line\">21</em>,\n      in <code class=\"function\">post</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>request_body = request.get_json()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>balloon_binary_image = request_body[&quot;input_binary_image&quot;]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>job_id = request_body[&quot;job_id&quot;]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>return jsonify({'status': 'success',</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>'output_filename': json.loads(</pre>\n<pre class=\"line current\"><span class=\"ws\">                            </span>str(predict.predict(job_id, balloon_binary_image)).replace(&quot;\\'&quot;, &quot;\\&quot;&quot;))})</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963208\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\Balloon_Segmentation\\predict.py\"</cite>,\n      line <em class=\"line\">33</em>,\n      in <code class=\"function\">predict</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>returned_output_binary = splitext(image)[0] + '_black_&amp;_white' + splitext(image)[1]</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>image = './resources/' + job_id + '/images/original/' + image</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># fixing the image to a ratio</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>old_im = Image.open(image)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>old_size = old_im.size</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>x = old_size[0]</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>y = int((x * 3) / 2)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-2599257963528\">\n  <h4>File <cite class=\"filename\">\"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\PIL\\Image.py\"</cite>,\n      line <em class=\"line\">2931</em>,\n      in <code class=\"function\">open</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>if exclusive_fp:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>fp.close()</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>for message in accept_warnings:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>warnings.warn(message)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>raise UnidentifiedImageError(</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>&quot;cannot identify image file %r&quot; % (filename if filename else fp)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>#</pre>\n<pre class=\"line after\"><span class=\"ws\"></span># Image processing.</pre></div>\n</div>\n</ul>\n  <blockquote>PIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg'</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 584, in error_router\n    return original_handler(e)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py&quot;, line 38, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py&quot;, line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\views.py&quot;, line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\resource.py&quot;, line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\controllers\\balloon_controller.py&quot;, line 21, in post\n    str(predict.predict(job_id, balloon_binary_image)).replace(&quot;\\'&quot;, &quot;\\&quot;&quot;))})\n  File &quot;C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\Balloon_Segmentation\\predict.py&quot;, line 33, in predict\n    old_im = Image.open(image)\n  File &quot;C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\PIL\\Image.py&quot;, line 2931, in open\n    &quot;cannot identify image file %r&quot; % (filename if filename else fp)\nPIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg'</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\", line 584, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\_compat.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\api.py\", line 325, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask\\views.py\", line 89, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\flask_restplus\\resource.py\", line 44, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\controllers\\balloon_controller.py\", line 21, in post\n    str(predict.predict(job_id, balloon_binary_image)).replace(\"\\'\", \"\\\"\"))})\n  File \"C:\\Users\\Dilshan\\Desktop\\Comic bu\\Comic_Book_Image_Processing_Service\\Balloon_Segmentation\\predict.py\", line 33, in predict\n    old_im = Image.open(image)\n  File \"C:\\Users\\Dilshan\\anaconda3\\lib\\site-packages\\PIL\\Image.py\", line 2931, in open\n    \"cannot identify image file %r\" % (filename if filename else fp)\nPIL.UnidentifiedImageError: cannot identify image file './resources/453e5a90-fe29-11ea-a0ca-219ff46d1d47/images/original/2020-09-24T05-46-19.487Zsnowy.jpg'\n\n-->\n","headers":{"content-type":"text/html; charset=utf-8","x-xss-protection":"0","connection":"close","server":"Werkzeug/1.0.1 Python/3.7.7","date":"Thu, 24 Sep 2020 05:46:44 GMT"},"request":{"uri":{"protocol":"http:","slashes":true,"auth":null,"host":"localhost:3001","port":"3001","hostname":"localhost","hash":null,"search":null,"query":null,"pathname":"/image_processing_service/recognize/ballons/start","path":"/image_processing_service/recognize/ballons/start","href":"http://localhost:3001/image_processing_service/recognize/ballons/start"},"method":"POST","headers":{"Content-Type":"application/json; charset=utf-8","accept":"application/json","content-length":106}}},"timestamp":"2020-09-24T05:46:44.928Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:13:11.541Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:14:31.565Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:14:55.430Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:14:57.205Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:15:49.175Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:20:16.342Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:20:18.751Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:21:52.899Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:22:24.937Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:22:27.631Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:22:56.903Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:22:58.448Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:27:49.309Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:27:59.246Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:28:00.969Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:28:01.898Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:28:42.092Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:28:46.248Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:28:47.999Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:28:52.865Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:28:53.668Z"}
error: undefined {"name":"MongoNetworkError","errorLabels":["TransientTransactionError"],"timestamp":"2020-09-24T08:39:33.857Z"}
error: undefined {"name":"MongoNetworkError","errorLabels":["TransientTransactionError"],"timestamp":"2020-09-24T08:39:33.859Z"}
error: undefined {"name":"MongoNetworkError","errorLabels":["TransientTransactionError"],"timestamp":"2020-09-24T08:39:33.861Z"}
error: undefined {"name":"MongoNetworkError","errorLabels":["TransientTransactionError"],"timestamp":"2020-09-24T08:39:33.864Z"}
error: undefined {"name":"MongoNetworkError","errorLabels":["TransientTransactionError"],"timestamp":"2020-09-24T08:39:33.866Z"}
error: undefined {"name":"MongoNetworkError","errorLabels":["TransientTransactionError"],"timestamp":"2020-09-24T08:39:33.868Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:33.879Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:33.885Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:33.888Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:33.892Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:33.895Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:33.900Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:33.904Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:33.907Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:33.910Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:33.913Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:45.165Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:46.821Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:47.742Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:54.452Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:54.460Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:39:54.467Z"}
error: Error caught while checking for pending jobs. Job initialization failed! {"timestamp":"2020-09-24T08:41:05.630Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:41:05.632Z"}
error: Error caught while checking for pending jobs. Job initialization failed! {"timestamp":"2020-09-24T08:41:27.054Z"}
error: undefined {"name":"MongoError","timestamp":"2020-09-24T08:41:27.056Z"}
error: undefined {"name":"MongoNetworkError","errorLabels":["TransientTransactionError"],"timestamp":"2020-09-24T08:44:36.038Z"}
